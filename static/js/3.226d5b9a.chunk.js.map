{"version":3,"sources":["component/Profile/ProfileInfo/ProfileInfo.module.css","component/Profile/Profile.module.css","component/Profile/MyPosts/MyPosts.module.css","component/Profile/MyPosts/Posts/Post.module.css","component/hoc/withAurhRedirect.tsx","component/Profile/MyPosts/Posts/Post.tsx","component/Profile/MyPosts/MyPosts.tsx","component/Profile/ProfileInfo/ProfileStatusWithHook.tsx","component/Profile/ProfileInfo/ContactProfile.tsx","component/Profile/ProfileInfo/ContactProfileFrorm.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/ProfContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","Post","memo","post","deletedPost","ii","Date","toLocaleTimeString","className","s","img","alt","src","imgFor","name","value","count","onClick","id","MyPosts","props","dispatch","useDispatch","postsData","useSelector","profilePage","action","postsElements","map","item","postsBlock","initialValues","postText","onSubmit","str","resetForm","addCreactorPost","component","placeholder","type","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","onDoubleClick","onChange","e","currentTarget","onBlur","updateStatusTh","autoFocus","ContactProfile","pf","isOwner","activeEditMode","containerContacts","fullName","lookingForAJobDescription","aboutMe","contacts","Object","keys","key","ContactProfileFrorm","editProfileData","validSchem","Yup","shape","min","required","InitialValues","validationSchema","obj","adoutUser","errors","touched","handleChange","disabled","isValid","ProfileInfo","profile","Preloader","wrapper","pagePhoto","photos","small","iconUser","userIcon","file","target","files","length","sendPhoto","objProperti","editProfile","ProfConteiner","idUser","userId","history","useReactRouter","refreshProfile","match","params","push","getProfileTh","getProfile","getStatusTh","getStatus","useEffect","content","compose","withRouter","Component","RedirectComponent","this","to","React","connect"],"mappings":"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","file":"static/js/3.226d5b9a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgeing\":\"ProfileInfo_imgeing__1h9kc\",\"wrapper\":\"ProfileInfo_wrapper__1EHBP\",\"pagePhoto\":\"ProfileInfo_pagePhoto__1kQwM\",\"adoutUser\":\"ProfileInfo_adoutUser__2WDdn\",\"status\":\"ProfileInfo_status__2p7ZZ\",\"userIcon\":\"ProfileInfo_userIcon__3dmZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__OXd_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__297N5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Post_img__3RbL1\"};","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n\tisAuth: boolean | null\r\n}\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStatePropsType => {\r\n\treturn {\r\n\t\tisAuth: state.auth.isAuth\r\n\t}\r\n};\r\n\r\nexport const withAuthRedirect = (Component: React.ComponentType) => {\r\n\tclass RedirectComponent extends React.Component<MapStatePropsType> {\r\n\t\trender() {\r\n\t\t\tif (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\tlet ConnectRedirectCommponent = connect<MapStatePropsType, {}, {}, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\treturn ConnectRedirectCommponent;\r\n}","import { memo } from 'react';\r\nimport s from './Post.module.css';\r\nimport imgFor from '../../../../img/img.webp'\r\nimport { PostDataType } from '../../../../commonType/commonType';\r\n\r\ntype PropsType = {\r\n\tpost: PostDataType\r\n\tdeletedPost: (id: number) => void\r\n}\r\n\r\nconst Post: React.FC<PropsType> = memo(({ post, deletedPost }) => {\r\n\tconst ii = new Date().toLocaleTimeString();\r\n\tlet response = \"abubandit\";\r\n\r\n\treturn (\r\n\r\n\t\t<div>\r\n\t\t\t<div>{response}</div>\r\n\t\t\t<img className={s.img} alt='' src={imgFor} />\r\n\t\t\t<span>{`${post.name} `}</span>\r\n\t\t\t<span>hi {ii}</span>\r\n\t\t\t<div>\r\n\t\t\t\t<span>{post.value}</span>\r\n\t\t\t\t<span>{post.count} like</span>\r\n\t\t\t</div>\r\n\t\t\t<button onClick={() => deletedPost(post.id)}>Remove</button>\r\n\r\n\t\t</div>\r\n\t);\r\n})\r\n\r\nexport default Post;","import s from './MyPosts.module.css';\r\nimport Post from './Posts/Post';\r\nimport { Form, Formik, Field } from 'formik';\r\nimport { memo } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { action } from '../../../redux/profilePageReduser';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\n\r\n\r\ntype PropsType = {}\r\ntype FormType = {\r\n\tpostText: string\r\n}\r\nexport const MyPosts: React.FC<PropsType> = memo(props => {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst addPost = (str: string) => dispatch(action.addCreactorPost(str))\r\n\tconst postsData = useSelector((state: AppStateType) => state.profilePage.postsData)\r\n\tconst deletedPost = (id: number) => dispatch(action.deletedPost(id))\r\n\r\n\tlet postsElements = postsData.map(item =>\r\n\t\t<Post key={item.id} post={item} deletedPost={deletedPost} />);\r\n\tconst initialValues: FormType = {\r\n\t\tpostText: '',\r\n\t}\r\n\r\n\treturn (\r\n\r\n\t\t<div className={s.postsBlock}>\r\n\t\t\tMy post\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={initialValues}\r\n\r\n\t\t\t\tonSubmit={(value, { resetForm }) => {\r\n\t\t\t\t\taddPost(value.postText);\r\n\t\t\t\t\tresetForm();\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\r\n\t\t\t\t{(props) => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<Field component={'textarea'} name={'postText'} placeholder={'write any one'} />\r\n\t\t\t\t\t\t<button type='submit'>ADD</button>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t\t{ postsElements}\r\n\t\t</div >\r\n\t);\r\n})\r\n\r\n","import s from './ProfileInfo.module.css';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\ntype PropsType = {\r\n\tstatus: string\r\n\tupdateStatusTh: (status: string) => void\r\n\r\n}\r\nconst ProfileStatusWithHook: React.FC<PropsType> = (props) => {\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\tlet [status, setStatus] = useState(props.status)\r\n\r\n\tconst activeEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\tconst diactiveEditMode = () => {\r\n\t\tsetEditMode(false);\r\n\t\tprops.updateStatusTh(status);\r\n\t}\r\n\r\n\tconst onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tsetStatus(e.currentTarget.value);\r\n\t}\r\n\r\n\treturn <div className={s.status}>\r\n\t\t{!editMode &&\r\n\t\t\t<div>\r\n\t\t\t\t<span onDoubleClick={activeEditMode} >{'Status: ' + props.status}</span>\r\n\t\t\t</div >\r\n\t\t}\r\n\t\t{editMode &&\r\n\t\t\t<div>\r\n\t\t\t\t<input onChange={onStatusChange} onBlur={diactiveEditMode} autoFocus={true} placeholder={'edit'} />\r\n\t\t\t</div >\r\n\t\t}\r\n\r\n\t</div >\r\n}\r\n\r\n\r\n\r\nexport default ProfileStatusWithHook;","import { memo } from 'react';\r\nimport { ProfileType } from '../../../commonType/commonType';\r\nimport s from './ProfileInfo.module.css';\r\ntype PropsType = {\r\n\tpf: ProfileType\r\n\tisOwner: boolean\r\n\tactiveEditMode: () => void\r\n}\r\nconst ContactProfile: React.FC<PropsType> = memo(({ pf, isOwner, activeEditMode }) => {\r\n\r\n\treturn (\r\n\t\t<div className={s.containerContacts}>\r\n\t\t\t<div className={s.containerContacts}>\r\n\t\t\t\t<div><b>Name: </b> {pf.fullName}</div>\r\n\t\t\t\t<div><b>My jobs possition: </b> {pf.lookingForAJobDescription}</div>\r\n\t\t\t\t<div><b>About me: </b>{pf.aboutMe}</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\t<div><b>Contacts</b>: {\r\n\t\t\t\t\tObject\r\n\t\t\t\t\t\t.keys(pf.contacts)\r\n\t\t\t\t\t\t.map(key => {\r\n\t\t\t\t\t\t\treturn <div key={key} >\r\n\t\t\t\t\t\t\t\t<b>{key}</b>:{pf.contacts[key as any]}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{ isOwner && <button type={'submit'} onClick={activeEditMode} >Click me!</button>}\r\n\t\t</div >\r\n\r\n\r\n\t)\r\n})\r\n\r\nexport default ContactProfile;\r\n","import { Formik, Form, Field } from 'formik';\r\nimport s from './ProfileInfo.module.css';\r\nimport * as Yup from \"yup\";\r\nimport { ContactsType, ProfileType } from '../../../commonType/commonType';\r\n\r\ntype PropsType = {\r\n\tpf: ProfileType\r\n\tisOwner: boolean\r\n\teditProfileData: (obj: InitialVFormik) => void\r\n}\r\nexport type InitialVFormik = {\r\n\tfullName: string\r\n\tlookingForAJobDescription: string\r\n\taboutMe: string\r\n\tcontacts?: ContactsType\r\n\r\n}\r\nconst ContactProfileFrorm: React.FC<PropsType> = ({ pf, editProfileData }) => {\r\n\r\n\tconst validSchem = Yup.object().shape({\r\n\t\tfullName: Yup.string().min(5).required(\"invalid\")\r\n\t})\r\n\tconst InitialValues: InitialVFormik = {\r\n\t\tfullName: pf.fullName,\r\n\t\tlookingForAJobDescription: pf.lookingForAJobDescription,\r\n\t\taboutMe: pf.aboutMe,\r\n\t}\r\n\treturn (\r\n\t\t<div className={s.containerContacts}>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={InitialValues}\r\n\t\t\t\tvalidationSchema={validSchem}\r\n\t\t\t\tonSubmit={(obj) => {\r\n\t\t\t\t\teditProfileData(obj);\r\n\t\t\t\t}} >{(props) => (\r\n\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t<div className={s.adoutUser}>\r\n\t\t\t\t\t\t\t<b>About me: </b><Field name={'aboutMe'} /></div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<b>Name: </b> <Field name={'fullName'} /></div>\r\n\t\t\t\t\t\t{props.errors.fullName && props.touched.fullName ? (<div>{props.errors.fullName}</div>) : null}\r\n\t\t\t\t\t\t<div><b>My jobs possition: </b> <Field name={'lookingForAJobDescription'}\r\n\t\t\t\t\t\t\tcomponent={'textarea'} /></div>\r\n\r\n\r\n\t\t\t\t\t\t<div className={s.contacts}>\r\n\t\t\t\t\t\t\t<div><b>Contacts</b>: {Object.keys(pf.contacts).map((key: string) => {\r\n\t\t\t\t\t\t\t\treturn <div key={key}>\r\n\t\t\t\t\t\t\t\t\t<b>{key}</b>: <input name={'contacts.' + key} onChange={props.handleChange} />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<div><button type={'submit'} disabled={!props.isValid}>Save</button></div>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t</Formik >\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\n\r\nexport default ContactProfileFrorm;","import Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport iconUser from './../../../img/images.png';\r\nimport ContactProfile from './ContactProfile';\r\nimport React, { ChangeEvent, memo, useState } from 'react';\r\nimport ContactProfileFrorm, { InitialVFormik } from \"./ContactProfileFrorm\";\r\nimport { ProfileType } from '../../../commonType/commonType';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport { editProfile, sendPhoto, updateStatusTh } from '../../../redux/profilePageReduser';\r\n\r\n\r\ntype PropsType = { isOwner: boolean }\r\nexport const ProfileInfo: React.FC<PropsType> = memo((props) => {\r\n\r\n\tconst profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\tconst status = useSelector((state: AppStateType) => state.profilePage.status)\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst editProf = (objProperti: InitialVFormik) => { dispatch(editProfile(objProperti)) }\r\n\tconst sendPhotoT = (file: File) => { dispatch(sendPhoto(file)) }\r\n\tconst updateStatusThT = (status: string) => { dispatch(updateStatusTh(status)) }\r\n\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\tconst selectFile = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files?.length) {\r\n\t\t\tsendPhotoT(e.target.files[0])\r\n\t\t}\r\n\t}\r\n\r\n\tconst editProfileData = (obj: InitialVFormik) => {\r\n\t\teditProf(obj);\r\n\t\tsetEditMode(false);\r\n\t}\r\n\r\n\tconst activeEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={s.pagePhoto}>\r\n\t\t\t\t\t<img alt='' src={profile.photos.small || iconUser} className={s.userIcon} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{props.isOwner && <input type={'file'} onChange={selectFile} />}\r\n\t\t\t</div>\r\n\r\n\t\t\t{editMode ? <ContactProfileFrorm isOwner={props.isOwner} pf={profile} editProfileData={editProfileData} />\r\n\t\t\t\t: <ContactProfile isOwner={props.isOwner} pf={profile} activeEditMode={activeEditMode} />}\r\n\r\n\t\t\t<ProfileStatusWithHook status={status} updateStatusTh={updateStatusThT} />\r\n\t\t</div >\r\n\t);\r\n})\r\n","import React, { useEffect } from 'react';\r\nimport s from './Profile.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProfileTh, getStatusTh, } from '../../redux/profilePageReduser';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAurhRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport useReactRouter from 'use-react-router';\r\n\r\n\r\ntype PropsType = RouteComponentProps<RoutePropsType>\r\ntype RoutePropsType = {\r\n\tuserId: string\r\n}\r\n\r\nexport const ProfConteiner: React.FC<PropsType> = (props) => {\r\n\tconst idUser = useSelector((state: AppStateType) => state.auth.userId)\r\n\tconst { history } = useReactRouter();\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst getProfile = (userId: number) => { dispatch(getProfileTh(userId)) }\r\n\tconst getStatus = (userId: number) => { dispatch(getStatusTh(userId)) }\r\n\r\n\tconst refreshProfile = () => {\r\n\t\tlet userId: number | null = +props.match.params?.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = idUser\r\n\t\t\tif (!idUser) {\r\n\t\t\t\thistory.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tgetProfile(userId as number);\r\n\t\tgetStatus(userId as number);\r\n\t}\r\n\tuseEffect(() => { //ВОСПРИНИМАТЬ КАК СИНХРОНИЗАЦИЮ\r\n\t\trefreshProfile()\r\n\t}, [])\r\n\r\n\tuseEffect(() => { refreshProfile() }, [props.match.params.userId])\r\n\treturn (\r\n\t\t<div className={s.content} >\r\n\t\t\t<ProfileInfo isOwner={!props.match.params.userId} />\r\n\t\t\t<MyPosts />\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n\twithRouter,\r\n\twithAuthRedirect,\r\n)(ProfConteiner);"],"sourceRoot":""}