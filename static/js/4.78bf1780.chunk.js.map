{"version":3,"sources":["component/Dialog/Dialz.module.css","component/Dialog/DialogF.tsx"],"names":["module","exports","DialogF","props","dispatch","useDispatch","dialogData","useSelector","state","dialogs","dataDialogs","dataMessage","history","useHistory","parsed","Qs","parse","location","search","substr","getMessageWithFriends","userId","changeHistory","getMessageForUserTh","searchObj","id","push","pathname","stringify","useEffect","getDialogTh","dialogBlock","map","item","DialogItemo","photo","photos","userName","className","s","wrap","blockDialogs","blockMessage","MessageDialog","formSend","initialValues","message","onSubmit","value","body","resetForm","sendMessageFriendTh","TextArea","autoSize","minRows","maxRows","name","maxLength","style","maxWidth","placeholder","shape","type","htmlType","block","onClick","src","small","photoImg","width","alt","messageWrap","items","length","time","addedAt","substring","oneMessage","senderName","bodyT","noMessage"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,KAAO,oBAAoB,MAAQ,qBAAqB,aAAe,4BAA4B,aAAe,4BAA4B,YAAc,2BAA2B,WAAa,0BAA0B,MAAQ,qBAAqB,UAAY,yBAAyB,SAAW,0B,kMCchTC,EAAoB,SAACC,GACjC,IAAMC,EAAWC,cACXC,EAAaC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,QAAQC,eAChEC,EAAcJ,aAAY,SAACC,GAAD,OAAyBA,EAAMC,QAAQE,eACjEC,EAAUC,uBAEVC,EAASC,IAAGC,MAAMJ,EAAQK,SAASC,OAAOC,OAAO,IACjDC,EAAwB,SAACC,GAC9BC,EAAcD,GACdjB,EAASmB,YAAoBF,KAExBC,EAAgB,SAACD,GACtB,IAAIG,EAA0B,CAC7BC,GAAIJ,GAELT,EAAQc,KAAK,CACZC,SAAU,WACVT,OAAQH,IAAGa,UAAUJ,MAKvBK,qBAAU,WACTzB,EAAS0B,iBACP,CAACnB,IAEJ,IAAMoB,EAAczB,EAClB0B,KAAI,SAACC,GAAD,OAA8B,cAACC,EAAD,CAAaC,MAAOF,EAAKG,OAAQX,GAAIQ,EAAKR,GAC5EY,SAAUJ,EAAKI,SAAUjB,sBAAuBA,GADqCa,EAAKR,OAQ5F,OACC,sBAAKa,UAAWC,IAAEC,KAAlB,UACC,qBAAKF,UAAWC,IAAEE,aAAlB,SAAiCV,IACjC,sBAAKO,UAAWC,IAAEG,aAAlB,UACC,cAACC,EAAD,CAAehC,YAAaA,IAC5B,qBAAK2B,UAAWC,IAAEK,SAAlB,SACC,cAAC,IAAD,CACCC,cAAe,CACdC,QAAS,IAEVC,SAAU,SAACC,EAAD,GAA2B,IAfxBC,EAeOC,EAAgB,EAAhBA,UAfPD,EAgBHD,EAfRlC,EAAOW,IACZrB,EAAS+C,aAAqBrC,EAAOW,GAAIwB,IAerCC,KANF,SASE,SAAC/C,GAAD,OACA,eAAC,IAAD,WACC,cAAC,IAAMiD,SAAP,CAAgBC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKC,KAAM,UAAWC,UAAW,IAAKC,MAAO,CAAEC,SAAU,OAASC,YAAa,kBAChI,+BACC,cAAC,IAAD,CAAQC,MAAM,QAAQC,KAAM,UAAWC,SAAS,SAAhD,mCAUH7B,EAA8C,SAAC/B,GACpD,OAAO,sBAAKmC,UAAWC,IAAEyB,MAAOC,QAAS,WAAQ9D,EAAMiB,sBAAsBjB,EAAMsB,KAA5E,UACN,qBAAKyC,IAAK/D,EAAMgC,MAAMgC,OAASC,IAAUV,MAAO,CAAEW,MAAO,IAAMC,IAAI,KAClEnE,EAAMkC,aAGHM,EAA4C,SAACxC,GAClD,OAAO,qBAAKmC,UAAWC,IAAEgC,YAAlB,SAC8B,IAAnCpE,EAAMQ,YAAY6D,MAAMC,OACtBtE,EAAMQ,YAAY6D,MAAMxC,KAAI,SAACC,GAC9B,IAAIyC,EAAOzC,EAAK0C,QAAQC,UAAU,GAAI,IACtC,OAAO,sBAAmBtC,UAAWC,IAAEsC,WAAhC,UAEN,wCAAS5C,EAAK6C,WAAd,aAA6BJ,KAC7B,qBAAKpC,UAAWC,IAAEwC,MAAlB,SACE9C,EAAKgB,SAJShB,EAAKR,OASrB,qBAAKa,UAAWC,IAAEyC,UAAlB,qCAqBU9E","file":"static/js/4.78bf1780.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Dialz_wrap__1iVus\",\"block\":\"Dialz_block__ypVTh\",\"blockDialogs\":\"Dialz_blockDialogs__UVhGm\",\"blockMessage\":\"Dialz_blockMessage__IdDjO\",\"messageWrap\":\"Dialz_messageWrap__2AAC7\",\"oneMessage\":\"Dialz_oneMessage__3QO-F\",\"bodyT\":\"Dialz_bodyT__1RSoF\",\"noMessage\":\"Dialz_noMessage__3zt9r\",\"formSend\":\"Dialz_formSend__3FPA_\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { DialogRespondeData, sendMessageFriendTh, getMessageForUserTh, getDialogTh, ItemsMessageType, MessageServerType } from \"../../redux/dlgReduser\";\r\nimport { AppStateType } from \"../../redux/reduxStore\";\r\nimport photoImg from \"../../img/img.webp\"\r\nimport { useEffect } from \"react\";\r\nimport s from './Dialz.module.css';\r\nimport { Form, Formik } from \"formik\";\r\nimport { useHistory } from \"react-router\";\r\nimport Qs from \"qs\";\r\nimport { PhotosType } from \"../../commonType/commonType\";\r\nimport { Button } from \"antd\";\r\nimport { Input } from \"formik-antd\";\r\n\r\n\r\n\r\nexport const DialogF: React.FC = (props) => {\r\n\tconst dispatch = useDispatch()\r\n\tconst dialogData = useSelector((state: AppStateType) => state.dialogs.dataDialogs)\r\n\tconst dataMessage = useSelector((state: AppStateType) => state.dialogs.dataMessage)\r\n\tconst history = useHistory()\r\n\r\n\tconst parsed = Qs.parse(history.location.search.substr(1))\r\n\tconst getMessageWithFriends = (userId: number) => {\r\n\t\tchangeHistory(userId)\r\n\t\tdispatch(getMessageForUserTh(userId))\r\n\t}\r\n\tconst changeHistory = (userId: number) => {\r\n\t\tlet searchObj: QsForHistory = {\r\n\t\t\tid: userId\r\n\t\t}\r\n\t\thistory.push({\r\n\t\t\tpathname: '/dialogs',\r\n\t\t\tsearch: Qs.stringify(searchObj)\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getDialogTh())\r\n\t}, [dataMessage])\r\n\r\n\tconst dialogBlock = dialogData\r\n\t\t.map((item: DialogRespondeData) => <DialogItemo photo={item.photos} id={item.id} key={item.id}\r\n\t\t\tuserName={item.userName} getMessageWithFriends={getMessageWithFriends} />)\r\n\r\n\tconst sendMess = (body: ForInitialForm) => {\r\n\t\tif (!!parsed.id)\r\n\t\t\tdispatch(sendMessageFriendTh(+parsed.id, body))\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrap}>\r\n\t\t\t<div className={s.blockDialogs}>{dialogBlock}</div>\r\n\t\t\t<div className={s.blockMessage}>\r\n\t\t\t\t<MessageDialog dataMessage={dataMessage} />\r\n\t\t\t\t<div className={s.formSend}>\r\n\t\t\t\t\t<Formik\r\n\t\t\t\t\t\tinitialValues={{\r\n\t\t\t\t\t\t\tmessage: '',\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonSubmit={(value, { resetForm }) => {\r\n\t\t\t\t\t\t\tsendMess(value)\r\n\t\t\t\t\t\t\tresetForm()\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{(props) => (\r\n\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t<Input.TextArea autoSize={{ minRows: 1, maxRows: 4 }} name={'message'} maxLength={250} style={{ maxWidth: '60%' }} placeholder={'write message'} />\r\n\t\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t\t<Button shape=\"round\" type={'primary'} htmlType='submit' >Send</Button>\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Formik>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nconst DialogItemo: React.FC<PropsTypeDialogItemo> = (props) => {\r\n\treturn <div className={s.block} onClick={() => { props.getMessageWithFriends(props.id) }}>\r\n\t\t<img src={props.photo.small || photoImg} style={{ width: 50 }} alt=\"\" />\r\n\t\t{props.userName}\r\n\t</div>\r\n}\r\nconst MessageDialog: React.FC<MessagePropsType> = (props) => {\r\n\treturn <div className={s.messageWrap}  >\r\n\t\t{props.dataMessage.items.length !== 0\r\n\t\t\t? props.dataMessage.items.map((item: ItemsMessageType) => {\r\n\t\t\t\tlet time = item.addedAt.substring(11, 16)\r\n\t\t\t\treturn <div key={item.id} className={s.oneMessage}>\r\n\r\n\t\t\t\t\t<div>{`${item.senderName}  ${time}`}</div>\r\n\t\t\t\t\t<div className={s.bodyT}>\r\n\t\t\t\t\t\t{item.body}\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t})\r\n\t\t\t: <div className={s.noMessage}>No messages here yet</div>\r\n\t\t}\r\n\t</div>\r\n}\r\n\r\nexport type ForInitialForm = {\r\n\tmessage: string\r\n}\r\ntype PropsTypeDialogItemo = {\r\n\tuserName: string\r\n\tid: number\r\n\tphoto: PhotosType\r\n\tgetMessageWithFriends: (userId: number) => void\r\n}\r\ntype QsForHistory = {\r\n\tid?: number\r\n}\r\ntype MessagePropsType = {\r\n\tdataMessage: MessageServerType\r\n}\r\n\r\nexport default DialogF"],"sourceRoot":""}