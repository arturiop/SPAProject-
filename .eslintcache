[{"D:\\SAMURAI\\myapp\\src\\reportWebVitals.js":"1","D:\\SAMURAI\\myapp\\src\\component\\Music\\Music.jsx":"2","D:\\SAMURAI\\myapp\\src\\component\\Music\\Footer\\Footer.jsx":"3","D:\\SAMURAI\\myapp\\src\\redux\\appReduser.ts":"4","D:\\SAMURAI\\myapp\\src\\redux\\authReduser.ts":"5","D:\\SAMURAI\\myapp\\src\\redux\\friendsPageReduser.ts":"6","D:\\SAMURAI\\myapp\\src\\redux\\usersPageReducer.ts":"7","D:\\SAMURAI\\myapp\\src\\redux\\profilePageReduser.ts":"8","D:\\SAMURAI\\myapp\\src\\redux\\dialogdsPageReduser.ts":"9","D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\Users.tsx":"10","D:\\SAMURAI\\myapp\\src\\component\\common\\PageGenerator\\PageGenerator.tsx":"11","D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\User\\User.tsx":"12","D:\\SAMURAI\\myapp\\src\\redux\\reduxStore.ts":"13","D:\\SAMURAI\\myapp\\src\\component\\Settings\\Settings.tsx":"14","D:\\SAMURAI\\myapp\\src\\redux\\userSelect.ts":"15","D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\MyPosts.tsx":"16","D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\Posts\\Post.tsx":"17","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfile.tsx":"18","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfileFrorm.tsx":"19","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","D:\\SAMURAI\\myapp\\src\\component\\Navbar\\Navbar.tsx":"21","D:\\SAMURAI\\myapp\\src\\component\\News\\News.tsx":"22","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileContainer.tsx":"23","D:\\SAMURAI\\myapp\\src\\component\\login\\Login.tsx":"24","D:\\SAMURAI\\myapp\\src\\component\\Friends\\FriendsContainer.tsx":"25","D:\\SAMURAI\\myapp\\src\\component\\Header\\HeaderContainer.tsx":"26","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogsContainer.tsx":"27","D:\\SAMURAI\\myapp\\src\\component\\Header\\Header.tsx":"28","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Dialogs.tsx":"29","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogItem\\DialogsItem.tsx":"30","D:\\SAMURAI\\myapp\\src\\component\\Friends\\Friend\\Friend.tsx":"31","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Messages\\Messages.tsx":"32","D:\\SAMURAI\\myapp\\src\\component\\hoc\\withAurhRedirect.tsx":"33","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHook.tsx":"34","D:\\SAMURAI\\myapp\\src\\api\\profileApi.ts":"35","D:\\SAMURAI\\myapp\\src\\api\\usersApi.ts":"36","D:\\SAMURAI\\myapp\\src\\api\\api.ts":"37","D:\\SAMURAI\\myapp\\src\\api\\authApi.ts":"38","D:\\SAMURAI\\myapp\\src\\api\\securityApi.ts":"39","D:\\SAMURAI\\myapp\\src\\App.tsx":"40","D:\\SAMURAI\\myapp\\src\\component\\common\\Preloader\\Preloader.tsx":"41","D:\\SAMURAI\\myapp\\src\\index.tsx":"42","D:\\SAMURAI\\myapp\\src\\component\\Search\\Search.tsx":"43","D:\\SAMURAI\\myapp\\src\\component\\Users\\UsersPage.tsx":"44"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"46"},{"size":50275,"mtime":1613813778903,"results":"47","hashOfConfig":"46"},{"size":538,"mtime":1613829913812,"results":"48","hashOfConfig":"46"},{"size":999,"mtime":1614365186926,"results":"49","hashOfConfig":"46"},{"size":2346,"mtime":1614365257202,"results":"50","hashOfConfig":"46"},{"size":1208,"mtime":1614521338564,"results":"51","hashOfConfig":"46"},{"size":5100,"mtime":1614670808628,"results":"52","hashOfConfig":"46"},{"size":4293,"mtime":1614366183096,"results":"53","hashOfConfig":"46"},{"size":1766,"mtime":1614508027210,"results":"54","hashOfConfig":"46"},{"size":936,"mtime":1614613239546,"results":"55","hashOfConfig":"46"},{"size":930,"mtime":1614594103396,"results":"56","hashOfConfig":"46"},{"size":1137,"mtime":1614602990626,"results":"57","hashOfConfig":"46"},{"size":1265,"mtime":1614367314781,"results":"58","hashOfConfig":"46"},{"size":193,"mtime":1614176047077,"results":"59","hashOfConfig":"46"},{"size":692,"mtime":1614592972057,"results":"60","hashOfConfig":"46"},{"size":1349,"mtime":1614618298240,"results":"61","hashOfConfig":"46"},{"size":768,"mtime":1614184113114,"results":"62","hashOfConfig":"46"},{"size":956,"mtime":1614620468417,"results":"63","hashOfConfig":"46"},{"size":1856,"mtime":1614620462632,"results":"64","hashOfConfig":"46"},{"size":2136,"mtime":1614669251816,"results":"65","hashOfConfig":"46"},{"size":1099,"mtime":1614519153286,"results":"66","hashOfConfig":"46"},{"size":171,"mtime":1614195681458,"results":"67","hashOfConfig":"46"},{"size":3272,"mtime":1614669048810,"results":"68","hashOfConfig":"46"},{"size":2905,"mtime":1614614329298,"results":"69","hashOfConfig":"46"},{"size":1255,"mtime":1614522613420,"results":"70","hashOfConfig":"46"},{"size":949,"mtime":1614262021490,"results":"71","hashOfConfig":"46"},{"size":775,"mtime":1614369426021,"results":"72","hashOfConfig":"46"},{"size":614,"mtime":1614261971315,"results":"73","hashOfConfig":"46"},{"size":1313,"mtime":1614232890237,"results":"74","hashOfConfig":"46"},{"size":544,"mtime":1614232156524,"results":"75","hashOfConfig":"46"},{"size":599,"mtime":1614522874760,"results":"76","hashOfConfig":"46"},{"size":319,"mtime":1614232251421,"results":"77","hashOfConfig":"46"},{"size":800,"mtime":1614418531538,"results":"78","hashOfConfig":"46"},{"size":982,"mtime":1614234561943,"results":"79","hashOfConfig":"46"},{"size":1167,"mtime":1614365695611,"results":"80","hashOfConfig":"46"},{"size":1083,"mtime":1614598331525,"results":"81","hashOfConfig":"46"},{"size":511,"mtime":1614541283564,"results":"82","hashOfConfig":"46"},{"size":904,"mtime":1614345816879,"results":"83","hashOfConfig":"46"},{"size":219,"mtime":1614346041835,"results":"84","hashOfConfig":"46"},{"size":3036,"mtime":1614669084716,"results":"85","hashOfConfig":"46"},{"size":301,"mtime":1614418691989,"results":"86","hashOfConfig":"46"},{"size":456,"mtime":1614448580279,"results":"87","hashOfConfig":"46"},{"size":1345,"mtime":1614677670224,"results":"88","hashOfConfig":"46"},{"size":2751,"mtime":1614684444383,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1w73f1y",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"100"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"100"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"100"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"100"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"100"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\SAMURAI\\myapp\\src\\reportWebVitals.js",[],["190","191"],"D:\\SAMURAI\\myapp\\src\\component\\Music\\Music.jsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Music\\Footer\\Footer.jsx",[],"D:\\SAMURAI\\myapp\\src\\redux\\appReduser.ts",["192","193","194","195"],"import { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { autoraithTh } from \"./authReduser\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\n\r\nconst INITIALIZED = \"INITIALIZED\";\r\n\r\ntype InitializStateType = typeof initializState\r\n\r\nlet initializState = {\r\n\tinitialized: false\r\n};\r\ntype ActionType = ActionsTypes<typeof action>\r\n\r\nconst appReduser = (state = initializState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"INITIALIZED\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tinitialized: true\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst action = {\r\n\tsetInitialized: () => ({ type: \"INITIALIZED\" } as const)\r\n}\r\n\r\n\r\ntype ThunkType = CommonThunkActionType<ActionType, void>\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n\tlet promise = dispatch(autoraithTh());\r\n\tPromise.all([promise]).then(() => {\r\n\t\tdispatch(action.setInitialized());\r\n\t})\r\n};\r\n\r\n\r\nexport default appReduser;",["196","197"],"D:\\SAMURAI\\myapp\\src\\redux\\authReduser.ts",["198","199"],"\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ResultCodeCaptchEnum, ResultCodeEnum } from \"../api/api\";\r\nimport { authAPI } from \"../api/authApi\";\r\nimport { securityAPI } from \"../api/securityApi\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType, } from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n\tuserId: 1 as number | null,\r\n\temail: null as string | null,\r\n\tlogin: null as string | null,\r\n\tisAuth: false as boolean | null,\r\n\tcaptcha: null as string | null\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReduser = (state = initialState, action: ActionType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"SET_LOGIN_ID_EMAIL\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.data, //затрет все емейл логин и айди на новые\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"SET_CAPTCHA\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcaptcha: action.captcha,\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\r\n}\r\n\r\n\r\ntype ActionType = ActionsTypes<typeof action>\r\nconst action = {\r\n\tsetUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean | null) =>\r\n\t\t({ type: \"SET_LOGIN_ID_EMAIL\", data: { userId, email, login, isAuth } } as const),\r\n\tsetCaptcha: (captcha: string) => ({ type: \"SET_CAPTCHA\", captcha } as const),\r\n}\r\n\r\ntype ThunkType = CommonThunkActionType<ActionType>\r\n\r\nexport const loginTh = (data: any): ThunkType => async (dispatch) => {\r\n\r\n\tlet response = await authAPI.login(data)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(autoraithTh())\r\n\t} else {\r\n\t\tif (response.resultCode === ResultCodeCaptchEnum.Captcha) {\r\n\t\t\tdispatch(getCaptchaURL())\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const autoraithTh = (): ThunkType => async (dispatch) => {\r\n\tlet data = await authAPI.autoraithe()\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tlet { id, email, login } = data.data;\r\n\t\tdispatch(action.setUserData(id, email, login, true))\r\n\t};\r\n}\r\n\r\n\r\nexport const singOutTh = (): ThunkType => async (dispatch) => {\r\n\tlet data = await authAPI.logout()\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.setUserData(null, null, null, false))\r\n\t};\r\n}\r\n\r\nexport const getCaptchaURL = (): ThunkType => async (dispatch) => {\r\n\tlet data = await securityAPI.getCaptcha()\r\n\tdispatch(action.setCaptcha(data.url));\r\n}\r\n\r\n\r\nexport default authReduser;","D:\\SAMURAI\\myapp\\src\\redux\\friendsPageReduser.ts",[],"D:\\SAMURAI\\myapp\\src\\redux\\usersPageReducer.ts",["200","201","202","203"],"import { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { APIResponseType } from \"../api/api\";\r\nimport { usersAPI } from \"../api/usersApi\";\r\nimport { UserDataType } from \"../commonType/commonType\";\r\nimport { FilterType } from \"../component/Users/UsersPage\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\n\r\n\r\ntype ActionType = ActionsTypes<typeof action>\r\nexport type InitializStateType = typeof initializState;\r\n\r\nlet initializState = {\r\n\tuserData: [] as Array<UserDataType>,\r\n\tpageTotal: 20,\r\n\tpageCount: 3,\r\n\tcurrentPage: 1,\r\n\tisFetching: false,\r\n\ttoggleFetching: [] as Array<number>,\r\n\tfilter: {\r\n\t\tterm: '',\r\n\t\tfriend: null as null | boolean\r\n\t} as FilterType\r\n};\r\n\r\nconst userReducer = (state = initializState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'FOLLOW':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserData: [...state.userData].map(item => {\r\n\t\t\t\t\tif (item.id === action.userId) {\r\n\t\t\t\t\t\treturn { ...item, followed: true }\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\tcase 'UNFOLLOW': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserData: [...state.userData].map(item => {\r\n\t\t\t\t\tif (item.id === action.userId) {\r\n\t\t\t\t\t\treturn { ...item, followed: false }\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_USERS':\r\n\t\t\treturn { ...state, userData: [...action.users] }\r\n\r\n\t\tcase 'CURRENT':\r\n\t\t\treturn { ...state, currentPage: action.p }\r\n\r\n\t\tcase 'TOTAL_COUNT':\r\n\t\t\treturn { ...state, pageTotal: action.count }\r\n\r\n\t\tcase 'SWITCH_FETCH':\r\n\t\t\treturn { ...state, isFetching: action.fetching }\r\n\r\n\t\tcase 'TOGGLE_FETCHING':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoggleFetching: action.fetching\r\n\t\t\t\t\t? [...state.toggleFetching, action.userId]\r\n\t\t\t\t\t: state.toggleFetching.filter(id => id !== action.userId)\r\n\t\t\t}\r\n\t\tcase 'SEARCH_USERS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, userData: [...action.arrivedUsers]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'GET_USERS_FRIENDS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, userData: [...action.users]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'SET_FILTER_TERM': {\r\n\t\t\treturn { ...state, filter: action.payload }\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const action = {\r\n\tsearchUsers: (arrivedUsers: Array<UserDataType>) => ({ type: 'SEARCH_USERS', arrivedUsers } as const),\r\n\tfollow: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n\tunFollow: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n\tsetUsers: (users: Array<UserDataType>) => ({ type: 'SET_USERS', users } as const),\r\n\tsetCurrent: (p: number) => ({ type: 'CURRENT', p } as const),\r\n\tsetTotalUsers: (count: number) => ({ type: 'TOTAL_COUNT', count } as const),\r\n\tswitchFetch: (fetching: boolean) => ({ type: 'SWITCH_FETCH', fetching } as const),\r\n\ttoggleFetchingInProgres: (fetching: boolean, userId: number) => ({ type: 'TOGGLE_FETCHING', fetching, userId } as const),\r\n\tgetUserFriends: (users: Array<UserDataType>) => ({ type: 'GET_USERS_FRIENDS', users } as const),\r\n\tsetFilterTerm: (filter: FilterType) => ({ type: 'SET_FILTER_TERM', payload: filter } as const)\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType> // use in dispatch\r\ntype StateType = () => AppStateType // use in props for state\r\ntype ThunkType = CommonThunkActionType<ActionType> // use after props thunk\r\n\r\nexport const getUsers = (currentPage: number, pageCount: number, filter: FilterType): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tdispatch(action.switchFetch(true));\r\n\t\tdispatch(action.setFilterTerm(filter))\r\n\t\tlet data = await usersAPI.getUsers(currentPage, pageCount, filter.term, filter.friend)\r\n\t\tdispatch(action.switchFetch(false));\r\n\t\tdispatch(action.setUsers(data.items));\r\n\t\tdispatch(action.setTotalUsers(data.totalCount));\r\n\t\tdispatch(action.setCurrent(currentPage));\r\n\t}\r\n//  getState: () => AppStateType\r\nexport const changePage = (numb: number, pageCount: number, term: string): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tdispatch(action.setCurrent(numb));\r\n\t\tdispatch(action.switchFetch(true));\r\n\t\tlet data = await usersAPI.getUsers(numb, pageCount, term)\r\n\t\tdispatch(action.switchFetch(false));\r\n\t\tdispatch(action.setUsers(data.items));\r\n\t}\r\n\r\nexport const unFollowTh = (userId: number) => async (dispatch: DispatchType) => {\r\n\tdispatch(action.toggleFetchingInProgres(true, userId));\r\n\tlet data = await usersAPI.unfollow(userId)\r\n\tif (data.resultCode == 0) dispatch(action.unFollow(userId));\r\n\tdispatch(action.toggleFetchingInProgres(false, userId));\r\n}\r\n\r\nexport const followTh = (userId: number): ThunkType => async (dispatch) => {\r\n\tdispatch(action.toggleFetchingInProgres(true, userId));\r\n\tlet data = await usersAPI.follow(userId)\r\n\tif (data.resultCode === 0) dispatch(action.follow(userId));\r\n\tdispatch(action.toggleFetchingInProgres(false, userId));\r\n}\r\nexport const searchUsersTh = (nameUsers: string): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tlet data = await usersAPI.searchUsersByName(nameUsers)\r\n\t\tdispatch(action.searchUsers(data.items))\r\n\t}\r\n\r\nexport const getUserFriends = (): ThunkType => async (dispatch) => {\r\n\tlet data = await usersAPI.getUsersFriends()\r\n\tdispatch(action.getUserFriends(data.items))\r\n}\r\nexport default userReducer;","D:\\SAMURAI\\myapp\\src\\redux\\profilePageReduser.ts",["204","205"],"\r\nimport { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { PhotosType, PostDataType, ProfileType } from \"../commonType/commonType\";\r\nimport { InitialVFormik } from \"../component/Profile/ProfileInfo/ContactProfileFrorm\";\r\nimport { ResultCodeEnum } from \"../api/api\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\nimport { profileAPI } from \"../api/profileApi\";\r\n\r\n// const CHANGE_PROFILE = 'CHANGE_PROFILE';\r\n\r\nlet initialState = {\r\n\tpostsData: [\r\n\t\t{ id: 1, count: '5', name: 'Artur', value: 'hi' },\r\n\t\t{ id: 2, count: '1', name: 'Mukolai', value: 'hi' },\r\n\t\t{ id: 3, count: '2', name: 'Sanya', value: 'hi' }\r\n\t] as Array<PostDataType>,\r\n\tpost: '',\r\n\tprofile: null as ProfileType | null,\r\n\tstatus: '',\r\n};\r\nexport type InitializStateType = typeof initialState;\r\ntype ActionType = ActionsTypes<typeof action>\r\n\r\nconst profileReduser = (state = initialState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST': {\r\n\t\t\tlet newP = { id: state.postsData.length + 1, count: '0', name: 'artur', value: action.newPostTt };\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpostsData: [...state.postsData, newP],\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase 'SET_PROFILE': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, profile: action.profile\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_STATUS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, status: action.status\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'DELETED_POST': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, postsData: state.postsData.filter(item => item.id !== action.id)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'ADD_T': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, post: action.newPostTt\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'PHOTO': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, profile: { ...state.profile, photos: action.photos } as ProfileType\r\n\t\t\t}\r\n\t\t}\r\n\t\t// case CHANGE_PROFILE: {\r\n\t\t// \tdebugger\r\n\t\t// \treturn {\r\n\t\t// \t\t...state, profile: {\r\n\t\t// \t\t\t...state.profile,\r\n\t\t// \t\t\taboutMe: action.objProperti.aboutMe,\r\n\t\t// \t\t\tlookingForAJobDescription: action.objProperti.lookingForAJobDescription,\r\n\t\t// \t\t\tfullName: action.objProperti.fullName,\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const action = {\r\n\tchangePhoto: (photos: PhotosType) => ({ type: 'PHOTO', photos } as const),\r\n\taddT: (newPostTt: string) => ({ type: 'ADD_T', newPostTt } as const),\r\n\taddCreactorPost: (newPostTt: string) => ({ type: 'ADD_POST', newPostTt } as const), //for test\r\n\tsetProfile: (profile: ProfileType) => ({ type: 'SET_PROFILE', profile } as const),\r\n\tsetStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\r\n\tdeletedPost: (id: number) => ({ type: 'DELETED_POST', id } as const), //for test\r\n\t// export const changeProfile = (objProperti) => ({ type: CHANGE_PROFILE, objProperti }); // if want use so!\r\n}\r\n\r\n\r\n\r\ntype DispatchType = Dispatch<ActionType>\r\ntype StateType = () => AppStateType\r\ntype ThunkType = CommonThunkActionType<ActionType>\r\n\r\nexport const getProfileTh = (userId: number | null) => async (dispatch: DispatchType) => {\r\n\tlet data = await profileAPI.getProfile(userId)\r\n\tdispatch(action.setProfile(data));\r\n}\r\nexport const getStatusTh = (userId: number) => async (dispatch: DispatchType) => {    //для кого полуить стату\r\n\tlet response = await profileAPI.getStatus(userId)\r\n\tdispatch(action.setStatus(response.data)); //для сетСтатус\r\n}\r\nexport const updateStatusTh = (status: string) => async (dispatch: DispatchType) => {\r\n\tlet response = await profileAPI.updateStatus(status)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.setStatus(status));\r\n\t}\r\n}\r\n\r\nexport const sendPhoto = (photo: File): ThunkType => async (dispatch) => {\r\n\tlet data = await profileAPI.sendPhoto(photo)\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.changePhoto(data.data.photos));\r\n\t}\r\n}\r\n\r\nexport const editProfile = (objProperti: InitialVFormik): ThunkType => async (dispatch, getState) => { // refresh profile data and do request new user profile\r\n\tlet userId = getState().auth.userId;\r\n\tlet response = await profileAPI.editProfile(objProperti)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tif (userId !== null) {\r\n\t\t\tdispatch(getProfileTh(userId))\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error(\"User id can`t be null\")\r\n\t\t}\r\n\r\n\t\t// dispatch(changeProfile(objProperti));\r\n\t}\r\n}\r\n\r\nexport default profileReduser;","D:\\SAMURAI\\myapp\\src\\redux\\dialogdsPageReduser.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\Users.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\common\\PageGenerator\\PageGenerator.tsx",["206"],"import s from './PageGenerator.module.css';\r\n\r\n\r\ntype PropsType = {\r\n\tpageTotal: number\r\n\tpageCount: number\r\n\tcurrentPage: number\r\n\tonChangeNumb: (item: number) => void\r\n}\r\nconst PageGenerator: React.FC<PropsType> = ({ pageTotal, pageCount, currentPage, onChangeNumb }): any => {\r\n\r\n\r\n\r\n\tlet pageArray: Array<number> = [];\r\n\tfor (let i = 1; i <= Math.ceil(pageTotal / pageCount); i++) {\r\n\t\tpageArray.push(i);\r\n\t}\r\n\r\n\treturn (\r\n\t\tpageArray.map(item => {\r\n\t\t\tif ((item >= (currentPage - 2)) && (item <= (currentPage + 2))) {\r\n\t\t\t\treturn (<span key={item} onClick={e => { onChangeNumb(item) }}\r\n\t\t\t\t\tclassName={currentPage === item ? s.thisPage : \"\"}>\r\n\t\t\t\t\t{` ${item}`}</span>);\r\n\t\t\t} else if (pageArray.length === item) {\r\n\t\t\t\treturn (<span key={item} onClick={e => { onChangeNumb(item) }}\r\n\t\t\t\t\tclassName={currentPage === item ? s.thisPage : \"\"}>\r\n\t\t\t\t\t{` ...${item}`}</span>);\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n}\r\nexport default PageGenerator;\r\n","D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\User\\User.tsx",[],"D:\\SAMURAI\\myapp\\src\\redux\\reduxStore.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Settings\\Settings.tsx",[],"D:\\SAMURAI\\myapp\\src\\redux\\userSelect.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\Posts\\Post.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfile.tsx",["207"],"import { ContactsType, ProfileType } from '../../../commonType/commonType';\r\nimport s from './ProfileInfo.module.css';\r\ntype PropsType = {\r\n\tpf: ProfileType\r\n\tisOwner: boolean\r\n\tactiveEditMode: () => void\r\n}\r\nconst ContactProfile: React.FC<PropsType> = ({ pf, isOwner, activeEditMode }) => {\r\n\treturn (\r\n\t\t<div className={s.containerContacts}>\r\n\t\t\t<div className={s.containerContacts}>\r\n\t\t\t\t<div><b>Name: </b> {pf.fullName}</div>\r\n\t\t\t\t<div><b>My jobs possition: </b> {pf.lookingForAJobDescription}</div>\r\n\t\t\t\t<div><b>About me: </b>{pf.aboutMe}</div>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.contacts}>\r\n\t\t\t\t<div><b>Contacts</b>: {\r\n\t\t\t\t\tObject\r\n\t\t\t\t\t\t.keys(pf.contacts)\r\n\t\t\t\t\t\t.map(key => {\r\n\t\t\t\t\t\t\treturn <div key={key} >\r\n\t\t\t\t\t\t\t\t<b>{key}</b>:{pf.contacts[key as any]}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t{ isOwner && <button type={'submit'} onClick={activeEditMode} >Click me!</button>}\r\n\t\t</div >\r\n\r\n\r\n\t)\r\n}\r\n\r\nexport default ContactProfile;\r\n","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfileFrorm.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx",["208","209"],"import Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport iconUser from './../../../img/images.png';\r\nimport ContactProfile from './ContactProfile';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport ContactProfileFrorm, { InitialVFormik } from \"./ContactProfileFrorm\";\r\nimport { ProfileType } from '../../../commonType/commonType';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport { editProfile, sendPhoto, updateStatusTh } from '../../../redux/profilePageReduser';\r\n\r\n\r\ntype PropsType = {}\r\nexport const ProfileInfo: React.FC<PropsType> = (props) => {\r\n\tconst profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\tconst status = useSelector((state: AppStateType) => state.profilePage.status)\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst editProf = (objProperti: InitialVFormik) => { dispatch(editProfile(objProperti)) }\r\n\tconst sendPhotoT = (file: File) => { dispatch(sendPhoto(file)) }\r\n\tconst updateStatusThT = (status: string) => { dispatch(updateStatusTh(status)) }\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\tconst selectFile = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files?.length) {\r\n\t\t\tsendPhotoT(e.target.files[0])\r\n\t\t}\r\n\t}\r\n\r\n\tconst editProfileData = (obj: InitialVFormik) => {\r\n\t\teditProf(obj);\r\n\t\tsetEditMode(false);\r\n\t}\r\n\r\n\tconst activeEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={s.pagePhoto}>\r\n\t\t\t\t\t<img alt='' src={profile.photos.small || iconUser} className={s.userIcon} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* {isOwner && <input type={'file'} onChange={selectFile} />} */}\r\n\t\t\t</div>\r\n\r\n\t\t\t{editMode ? <ContactProfileFrorm pf={profile} editProfileData={editProfileData} />\r\n\t\t\t\t: <ContactProfile pf={profile} activeEditMode={activeEditMode} isOwner={false} />}\r\n\r\n\t\t\t<ProfileStatusWithHook status={status} updateStatusTh={updateStatusThT} />\r\n\t\t</div >\r\n\t);\r\n}\r\n","D:\\SAMURAI\\myapp\\src\\component\\Navbar\\Navbar.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\News\\News.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileContainer.tsx",["210","211"],"import React, { useEffect } from 'react';\r\nimport s from './Profile.module.css';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport { getProfileTh, getStatusTh, updateStatusTh, sendPhoto, editProfile } from '../../redux/profilePageReduser';\r\nimport { RouteComponentProps, useHistory, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAurhRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { ProfileType } from '../../commonType/commonType';\r\nimport { InitialVFormik } from './ProfileInfo/ContactProfileFrorm';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\n\r\n\r\ntype MapStatePropsType = {\r\n\tprofile: ProfileType | null\r\n\tstatus: string\r\n\tid: number | null\r\n}\r\ntype OwnPropsType = {\r\n\town?: string\r\n}\r\ntype MapDispatchProps = {\r\n\tgetProfileTh: (userId: number) => void\r\n\tgetStatusTh: (userId: number) => void\r\n\tupdateStatusTh: (status: string) => void\r\n\tsendPhoto: (photos: any) => void\r\n\teditProfile: (objProperti: InitialVFormik) => void\r\n}\r\ntype PropsType = MapDispatchProps & OwnPropsType & MapStatePropsType & RouteComponentProps<RoutePropsType>\r\ntype RoutePropsType = {\r\n\tuserId: string\r\n}\r\nexport const ProfContainer: React.FC = (props) => {\r\n\tconst idUser = useSelector((state: AppStateType) => state.auth.userId)\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst getProfile = (userId: number) => { dispatch(getProfileTh(userId)) }\r\n\tconst getStatus = (userId: number) => { dispatch(getStatusTh(userId)) }\r\n\tconst history = useHistory()\r\n\tconst refreshProfile = () => {\r\n\t\t//@ts-ignore\r\n\t\tlet userId: number | null = +props.match.params.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = idUser\r\n\t\t\tif (!idUser) {\r\n\t\t\t\thistory.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tgetProfile(userId as number);\r\n\t\tgetStatus(userId as number);\r\n\t}\r\n\tuseEffect(() => { //ВОСПРИНИМАТЬ КАК СИНХРОНИЗАЦИЮ\r\n\t\trefreshProfile()\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className={s.content} >\r\n\t\t\t<ProfileInfo />\r\n\t\t\t<MyPosts />\r\n\t\t</div >\r\n\t)\r\n}\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n\trefreshProfile() {\r\n\t\tlet userId: number | null = +this.props.match.params.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.id\r\n\t\t\tif (!userId) {\r\n\r\n\t\t\t\tthis.props.history.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.props.getProfileTh(userId as number);\r\n\t\tthis.props.getStatusTh(userId as number);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.refreshProfile();\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps: PropsType) {\r\n\t\tif (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n\t\t\tthis.refreshProfile();\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet p = this.props;\r\n\t\treturn (\r\n\t\t\t<div className={s.content} >\r\n\t\t\t\t<ProfileInfo />\r\n\t\t\t\t<MyPosts />\r\n\t\t\t</div >\r\n\t\t)\r\n\t}\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n\treturn {\r\n\t\tprofile: state.profilePage.profile,\r\n\t\tstatus: state.profilePage.status,\r\n\t\tid: state.auth.userId,\r\n\t}\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n\twithRouter,\r\n\twithAuthRedirect,\r\n\tconnect<MapStatePropsType, MapDispatchProps, OwnPropsType, AppStateType>(mapStateToProps,\r\n\t\t{ getProfileTh, getStatusTh, updateStatusTh, sendPhoto, editProfile }))(ProfileContainer);","D:\\SAMURAI\\myapp\\src\\component\\login\\Login.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Friends\\FriendsContainer.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Header\\HeaderContainer.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogsContainer.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Header\\Header.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Dialogs.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogItem\\DialogsItem.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Friends\\Friend\\Friend.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Messages\\Messages.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\hoc\\withAurhRedirect.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHook.tsx",[],"D:\\SAMURAI\\myapp\\src\\api\\profileApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\usersApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\api.ts",["212"],"import axios from \"axios\";\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n\tSuccses = 0,\r\n\tError = 1\r\n}\r\nexport enum ResultCodeCaptchEnum {\r\n\tCaptcha = 10\r\n}\r\nexport const instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t\"API-KEY\": \"1f1850ac-6994-4f00-8632-17c6cdab6dee\"\r\n\t}\r\n});\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n\tdata: D\r\n\tfieldsErrors: Array<string>\r\n\tmessages: Array<string>\r\n\tresultCode: 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\SAMURAI\\myapp\\src\\api\\authApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\securityApi.ts",[],"D:\\SAMURAI\\myapp\\src\\App.tsx",["213"],"import './App.css';\r\nimport Navbar from './component/Navbar/Navbar';\r\nimport { BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter } from 'react-router-dom';\r\nimport Music from './component/Music/Music';\r\nimport Settings from './component/Settings/Settings';\r\nimport News from './component/News/News';\r\nimport FriendsContainer from './component/Friends/FriendsContainer';\r\nimport { UsersPage } from './component/Users/UsersPage';\r\nimport HeaderContainer from './component/Header/HeaderContainer';\r\nimport { LoginPage } from './component/login/Login';\r\nimport React, { Suspense } from 'react';\r\nimport { connect, Provider } from 'react-redux';\r\nimport { initializeApp } from './redux/appReduser';\r\nimport { compose } from 'redux';\r\nimport Preloader from './component/common/Preloader/Preloader';\r\nimport store, { AppStateType } from \"./redux/reduxStore\";\r\nconst DialogsContainer = React.lazy(() => import('./component/Diaologs/DialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./component/Profile/ProfileContainer'));\r\n\r\nclass App extends React.Component<any> {\r\n\tcatchAllerrors = (e: PromiseRejectionEvent) => {\r\n\t\talert(\"errors\"); // вызываем не алерт а санку(нужно сделать ) и там дисппат сделать изменить стейт вывести текст где то как с капей и как то убирать \r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tthis.props.initializeApp();\r\n\t\twindow.addEventListener(\"unhandledrejection\", this.catchAllerrors)\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (!this.props.init) {\r\n\t\t\treturn <Preloader />\r\n\t\t}\r\n\r\n\t\treturn <div className='app-wraper' >\r\n\t\t\t<HeaderContainer />\r\n\t\t\t< Navbar />\r\n\t\t\t<div className='app-wraper-content' >\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path='/' render={() => {\r\n\t\t\t\t\t\treturn <Redirect to={'/profile'} />\r\n\t\t\t\t\t}\r\n\t\t\t\t\t} />\r\n\t\t\t\t\t< Route path='/profile/:userId?' render={() => {\r\n\t\t\t\t\t\treturn <Suspense fallback={\r\n\t\t\t\t\t\t\t<div>loading...</div>}>\r\n\t\t\t\t\t\t\t< ProfileContainer />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t} />\r\n\t\t\t\t\t< Route path='/friends' render={() => <FriendsContainer />} />\r\n\t\t\t\t\t<Route path='/dialogs' render={() => {\r\n\t\t\t\t\t\treturn <Suspense fallback={<div>loading...</div>}>\r\n\t\t\t\t\t\t\t< DialogsContainer />\r\n\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t} />\r\n\t\t\t\t\t<Route path='/music' render={() => <Music />} />\r\n\t\t\t\t\t<Route path='/news' render={() => <News />} />\r\n\t\t\t\t\t<Route path='/find/users' render={() => <UsersPage title={'users'} />} />\r\n\t\t\t\t\t<Route path='/settings' render={() => <Settings />} />\r\n\t\t\t\t\t<Route path='/login' render={() => <LoginPage />} />\r\n\t\t\t\t</Switch>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t}\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n\treturn {\r\n\t\tinit: state.app.initialized\r\n\t}\r\n}\r\n\r\nlet AppContainer = compose<React.ComponentType>(withRouter, connect(mapStateToProps, { initializeApp }))(App);\r\n\r\nconst MainApp: React.FC = () => {\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Provider store={store} >\r\n\t\t\t\t<AppContainer />\r\n\t\t\t</Provider>\r\n\t\t</BrowserRouter>\r\n\t)\r\n}\r\nexport default MainApp;\r\n","D:\\SAMURAI\\myapp\\src\\component\\common\\Preloader\\Preloader.tsx",[],"D:\\SAMURAI\\myapp\\src\\index.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Search\\Search.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Users\\UsersPage.tsx",["214","215"],{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"221","line":1,"column":10,"nodeType":"222","messageId":"223","endLine":1,"endColumn":18},{"ruleId":"220","severity":1,"message":"224","line":2,"column":10,"nodeType":"222","messageId":"223","endLine":2,"endColumn":21},{"ruleId":"220","severity":1,"message":"225","line":4,"column":24,"nodeType":"222","messageId":"223","endLine":4,"endColumn":36},{"ruleId":"220","severity":1,"message":"226","line":6,"column":7,"nodeType":"222","messageId":"223","endLine":6,"endColumn":18},{"ruleId":"216","replacedBy":"217"},{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","severity":1,"message":"224","line":2,"column":10,"nodeType":"222","messageId":"223","endLine":2,"endColumn":21},{"ruleId":"220","severity":1,"message":"225","line":6,"column":24,"nodeType":"222","messageId":"223","endLine":6,"endColumn":36},{"ruleId":"220","severity":1,"message":"224","line":2,"column":10,"nodeType":"222","messageId":"223","endLine":2,"endColumn":21},{"ruleId":"220","severity":1,"message":"227","line":3,"column":10,"nodeType":"222","messageId":"223","endLine":3,"endColumn":25},{"ruleId":"220","severity":1,"message":"228","line":103,"column":6,"nodeType":"222","messageId":"223","endLine":103,"endColumn":15},{"ruleId":"229","severity":1,"message":"230","line":129,"column":22,"nodeType":"231","messageId":"232","endLine":129,"endColumn":24},{"ruleId":"220","severity":1,"message":"224","line":3,"column":10,"nodeType":"222","messageId":"223","endLine":3,"endColumn":21},{"ruleId":"220","severity":1,"message":"228","line":90,"column":6,"nodeType":"222","messageId":"223","endLine":90,"endColumn":15},{"ruleId":"233","severity":1,"message":"234","line":20,"column":22,"nodeType":"235","messageId":"236","endLine":20,"endColumn":24},{"ruleId":"220","severity":1,"message":"237","line":1,"column":10,"nodeType":"222","messageId":"223","endLine":1,"endColumn":22},{"ruleId":"220","severity":1,"message":"238","line":8,"column":10,"nodeType":"222","messageId":"223","endLine":8,"endColumn":21},{"ruleId":"220","severity":1,"message":"239","line":29,"column":8,"nodeType":"222","messageId":"223","endLine":29,"endColumn":18},{"ruleId":"240","severity":1,"message":"241","line":55,"column":5,"nodeType":"242","endLine":55,"endColumn":7,"suggestions":"243"},{"ruleId":"220","severity":1,"message":"244","line":90,"column":7,"nodeType":"222","messageId":"223","endLine":90,"endColumn":8},{"ruleId":"220","severity":1,"message":"245","line":20,"column":37,"nodeType":"222","messageId":"223","endLine":20,"endColumn":39},{"ruleId":"220","severity":1,"message":"246","line":3,"column":25,"nodeType":"222","messageId":"223","endLine":3,"endColumn":35},{"ruleId":"240","severity":1,"message":"247","line":50,"column":5,"nodeType":"242","endLine":50,"endColumn":7,"suggestions":"248"},{"ruleId":"240","severity":1,"message":"249","line":70,"column":5,"nodeType":"242","endLine":70,"endColumn":26,"suggestions":"250"},"no-native-reassign",["251"],"no-negated-in-lhs",["252"],"@typescript-eslint/no-unused-vars","'Dispatch' is defined but never used.","Identifier","unusedVar","'ThunkAction' is defined but never used.","'AppStateType' is defined but never used.","'INITIALIZED' is assigned a value but never used.","'APIResponseType' is defined but never used.","'StateType' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ContactsType' is defined but never used.","'ProfileType' is defined but never used.","'selectFile' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refreshProfile'. Either include it or remove the dependency array.","ArrayExpression",["253"],"'p' is assigned a value but never used.","'RC' is defined but never used.","'HashRouter' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageCount'. Either include them or remove the dependency array.",["254"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["255"],"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},"Update the dependencies array to be: [refreshProfile]",{"range":"262","text":"263"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageCount]",{"range":"264","text":"265"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"266","text":"267"},[1960,1962],"[refreshProfile]",[1751,1753],"[currentPage, dispatch, filter, history.location.search, pageCount]",[2380,2401],"[filter, currentPage, history]"]