[{"D:\\SAMURAI\\myapp\\src\\reportWebVitals.js":"1","D:\\SAMURAI\\myapp\\src\\component\\Music\\Music.jsx":"2","D:\\SAMURAI\\myapp\\src\\component\\Music\\Footer\\Footer.jsx":"3","D:\\SAMURAI\\myapp\\src\\redux\\appReduser.ts":"4","D:\\SAMURAI\\myapp\\src\\redux\\authReduser.ts":"5","D:\\SAMURAI\\myapp\\src\\redux\\friendsPageReduser.ts":"6","D:\\SAMURAI\\myapp\\src\\redux\\usersPageReducer.ts":"7","D:\\SAMURAI\\myapp\\src\\redux\\profilePageReduser.ts":"8","D:\\SAMURAI\\myapp\\src\\redux\\dialogdsPageReduser.ts":"9","D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\Users.tsx":"10","D:\\SAMURAI\\myapp\\src\\component\\common\\PageGenerator\\PageGenerator.tsx":"11","D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\User\\User.tsx":"12","D:\\SAMURAI\\myapp\\src\\redux\\reduxStore.ts":"13","D:\\SAMURAI\\myapp\\src\\component\\Settings\\Settings.tsx":"14","D:\\SAMURAI\\myapp\\src\\redux\\userSelect.ts":"15","D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\MyPosts.tsx":"16","D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\Posts\\Post.tsx":"17","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfile.tsx":"18","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfileFrorm.tsx":"19","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx":"20","D:\\SAMURAI\\myapp\\src\\component\\Navbar\\Navbar.tsx":"21","D:\\SAMURAI\\myapp\\src\\component\\News\\News.tsx":"22","D:\\SAMURAI\\myapp\\src\\component\\login\\Login.tsx":"23","D:\\SAMURAI\\myapp\\src\\component\\Friends\\FriendsContainer.tsx":"24","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Dialogs.tsx":"25","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogItem\\DialogsItem.tsx":"26","D:\\SAMURAI\\myapp\\src\\component\\Friends\\Friend\\Friend.tsx":"27","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Messages\\Messages.tsx":"28","D:\\SAMURAI\\myapp\\src\\component\\hoc\\withAurhRedirect.tsx":"29","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHook.tsx":"30","D:\\SAMURAI\\myapp\\src\\api\\profileApi.ts":"31","D:\\SAMURAI\\myapp\\src\\api\\usersApi.ts":"32","D:\\SAMURAI\\myapp\\src\\api\\api.ts":"33","D:\\SAMURAI\\myapp\\src\\api\\authApi.ts":"34","D:\\SAMURAI\\myapp\\src\\api\\securityApi.ts":"35","D:\\SAMURAI\\myapp\\src\\App.tsx":"36","D:\\SAMURAI\\myapp\\src\\component\\common\\Preloader\\Preloader.tsx":"37","D:\\SAMURAI\\myapp\\src\\index.tsx":"38","D:\\SAMURAI\\myapp\\src\\component\\Search\\Search.tsx":"39","D:\\SAMURAI\\myapp\\src\\component\\Users\\UsersPage.tsx":"40","D:\\SAMURAI\\myapp\\src\\component\\Header\\HeaderCompont.tsx":"41","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfContainer.tsx":"42","D:\\SAMURAI\\myapp\\src\\component\\pages\\ChatPages.tsx":"43"},{"size":375,"mtime":1614868233075,"results":"44","hashOfConfig":"45"},{"size":50275,"mtime":1614868232901,"results":"46","hashOfConfig":"45"},{"size":538,"mtime":1614868232898,"results":"47","hashOfConfig":"45"},{"size":999,"mtime":1614868233066,"results":"48","hashOfConfig":"45"},{"size":2346,"mtime":1614868233067,"results":"49","hashOfConfig":"45"},{"size":1208,"mtime":1614868233069,"results":"50","hashOfConfig":"45"},{"size":5053,"mtime":1615406023560,"results":"51","hashOfConfig":"45"},{"size":4293,"mtime":1614868233071,"results":"52","hashOfConfig":"45"},{"size":1766,"mtime":1614868233067,"results":"53","hashOfConfig":"45"},{"size":1016,"mtime":1614868232926,"results":"54","hashOfConfig":"45"},{"size":930,"mtime":1614594103396,"results":"55","hashOfConfig":"45"},{"size":1224,"mtime":1614868232925,"results":"56","hashOfConfig":"45"},{"size":1265,"mtime":1614868233072,"results":"57","hashOfConfig":"45"},{"size":193,"mtime":1614868232922,"results":"58","hashOfConfig":"45"},{"size":692,"mtime":1615405917302,"results":"59","hashOfConfig":"45"},{"size":1349,"mtime":1615206512609,"results":"60","hashOfConfig":"45"},{"size":766,"mtime":1615206186192,"results":"61","hashOfConfig":"45"},{"size":981,"mtime":1615206808077,"results":"62","hashOfConfig":"45"},{"size":1879,"mtime":1615206592241,"results":"63","hashOfConfig":"45"},{"size":2200,"mtime":1615206954757,"results":"64","hashOfConfig":"45"},{"size":1424,"mtime":1615205875822,"results":"65","hashOfConfig":"45"},{"size":171,"mtime":1614868232908,"results":"66","hashOfConfig":"45"},{"size":4376,"mtime":1614868232934,"results":"67","hashOfConfig":"45"},{"size":683,"mtime":1614868232893,"results":"68","hashOfConfig":"45"},{"size":1580,"mtime":1614868232888,"results":"69","hashOfConfig":"45"},{"size":544,"mtime":1614868232887,"results":"70","hashOfConfig":"45"},{"size":667,"mtime":1614868232892,"results":"71","hashOfConfig":"45"},{"size":319,"mtime":1614868232889,"results":"72","hashOfConfig":"45"},{"size":800,"mtime":1614868232932,"results":"73","hashOfConfig":"45"},{"size":982,"mtime":1614868232919,"results":"74","hashOfConfig":"45"},{"size":1167,"mtime":1614868232882,"results":"75","hashOfConfig":"45"},{"size":1083,"mtime":1614868232883,"results":"76","hashOfConfig":"45"},{"size":511,"mtime":1615206451239,"results":"77","hashOfConfig":"45"},{"size":904,"mtime":1614868232882,"results":"78","hashOfConfig":"45"},{"size":219,"mtime":1614868232882,"results":"79","hashOfConfig":"45"},{"size":4241,"mtime":1615206355007,"results":"80","hashOfConfig":"45"},{"size":301,"mtime":1614868232931,"results":"81","hashOfConfig":"45"},{"size":456,"mtime":1614868233061,"results":"82","hashOfConfig":"45"},{"size":2236,"mtime":1614868232921,"results":"83","hashOfConfig":"45"},{"size":2550,"mtime":1615406023621,"results":"84","hashOfConfig":"45"},{"size":1035,"mtime":1614946464890,"results":"85","hashOfConfig":"45"},{"size":1730,"mtime":1614894564564,"results":"86","hashOfConfig":"45"},{"size":1998,"mtime":1615291910374,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1w73f1y",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"98"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"98"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"98"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"98"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"98"},"D:\\SAMURAI\\myapp\\src\\reportWebVitals.js",[],["192","193"],"D:\\SAMURAI\\myapp\\src\\component\\Music\\Music.jsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Music\\Footer\\Footer.jsx",[],"D:\\SAMURAI\\myapp\\src\\redux\\appReduser.ts",["194","195","196","197"],"import { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { autoraithTh } from \"./authReduser\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\n\r\nconst INITIALIZED = \"INITIALIZED\";\r\n\r\ntype InitializStateType = typeof initializState\r\n\r\nlet initializState = {\r\n\tinitialized: false\r\n};\r\ntype ActionType = ActionsTypes<typeof action>\r\n\r\nconst appReduser = (state = initializState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"INITIALIZED\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tinitialized: true\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst action = {\r\n\tsetInitialized: () => ({ type: \"INITIALIZED\" } as const)\r\n}\r\n\r\n\r\ntype ThunkType = CommonThunkActionType<ActionType, void>\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n\tlet promise = dispatch(autoraithTh());\r\n\tPromise.all([promise]).then(() => {\r\n\t\tdispatch(action.setInitialized());\r\n\t})\r\n};\r\n\r\n\r\nexport default appReduser;",["198","199"],"D:\\SAMURAI\\myapp\\src\\redux\\authReduser.ts",["200","201"],"\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { ResultCodeCaptchEnum, ResultCodeEnum } from \"../api/api\";\r\nimport { authAPI } from \"../api/authApi\";\r\nimport { securityAPI } from \"../api/securityApi\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType, } from \"./reduxStore\";\r\n\r\nlet initialState = {\r\n\tuserId: 1 as number | null,\r\n\temail: null as string | null,\r\n\tlogin: null as string | null,\r\n\tisAuth: false as boolean | null,\r\n\tcaptcha: null as string | null\r\n};\r\n\r\nexport type InitialStateType = typeof initialState;\r\n\r\nconst authReduser = (state = initialState, action: ActionType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase \"SET_LOGIN_ID_EMAIL\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t...action.data, //затрет все емейл логин и айди на новые\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase \"SET_CAPTCHA\": {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcaptcha: action.captcha,\r\n\t\t\t}\r\n\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n\r\n}\r\n\r\n\r\ntype ActionType = ActionsTypes<typeof action>\r\nconst action = {\r\n\tsetUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean | null) =>\r\n\t\t({ type: \"SET_LOGIN_ID_EMAIL\", data: { userId, email, login, isAuth } } as const),\r\n\tsetCaptcha: (captcha: string) => ({ type: \"SET_CAPTCHA\", captcha } as const),\r\n}\r\n\r\ntype ThunkType = CommonThunkActionType<ActionType>\r\n\r\nexport const loginTh = (data: any): ThunkType => async (dispatch) => {\r\n\r\n\tlet response = await authAPI.login(data)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(autoraithTh())\r\n\t} else {\r\n\t\tif (response.resultCode === ResultCodeCaptchEnum.Captcha) {\r\n\t\t\tdispatch(getCaptchaURL())\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const autoraithTh = (): ThunkType => async (dispatch) => {\r\n\tlet data = await authAPI.autoraithe()\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tlet { id, email, login } = data.data;\r\n\t\tdispatch(action.setUserData(id, email, login, true))\r\n\t};\r\n}\r\n\r\n\r\nexport const singOutTh = (): ThunkType => async (dispatch) => {\r\n\tlet data = await authAPI.logout()\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.setUserData(null, null, null, false))\r\n\t};\r\n}\r\n\r\nexport const getCaptchaURL = (): ThunkType => async (dispatch) => {\r\n\tlet data = await securityAPI.getCaptcha()\r\n\tdispatch(action.setCaptcha(data.url));\r\n}\r\n\r\n\r\nexport default authReduser;","D:\\SAMURAI\\myapp\\src\\redux\\friendsPageReduser.ts",[],"D:\\SAMURAI\\myapp\\src\\redux\\usersPageReducer.ts",["202","203","204"],"import { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { usersAPI } from \"../api/usersApi\";\r\nimport { UserDataType } from \"../commonType/commonType\";\r\nimport { FilterType } from \"../component/Users/UsersPage\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\n\r\n\r\ntype ActionType = ActionsTypes<typeof action>\r\nexport type InitializStateType = typeof initializState\r\n\r\nlet initializState = {\r\n\tuserData: [] as Array<UserDataType>,\r\n\tpageTotal: 20,\r\n\tpageCount: 10,\r\n\tcurrentPage: 1,\r\n\tisFetching: false,\r\n\ttoggleFetching: [] as Array<number>,\r\n\tfilter: {\r\n\t\tterm: '',\r\n\t\tfriend: null as boolean | null\r\n\t} as FilterType\r\n};\r\n\r\nconst userReducer = (state = initializState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'FOLLOW':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserData: [...state.userData].map(item => {\r\n\t\t\t\t\tif (item.id === action.userId) {\r\n\t\t\t\t\t\treturn { ...item, followed: true }\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\tcase 'UNFOLLOW': {\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserData: [...state.userData].map(item => {\r\n\t\t\t\t\tif (item.id === action.userId) {\r\n\t\t\t\t\t\treturn { ...item, followed: false }\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn item;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_USERS':\r\n\t\t\treturn { ...state, userData: [...action.users] }\r\n\r\n\t\tcase 'CURRENT':\r\n\t\t\treturn { ...state, currentPage: action.p }\r\n\r\n\t\tcase 'TOTAL_COUNT':\r\n\t\t\treturn { ...state, pageTotal: action.count }\r\n\r\n\t\tcase 'SWITCH_FETCH':\r\n\t\t\treturn { ...state, isFetching: action.fetching }\r\n\r\n\t\tcase 'TOGGLE_FETCHING':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttoggleFetching: action.fetching\r\n\t\t\t\t\t? [...state.toggleFetching, action.userId]\r\n\t\t\t\t\t: state.toggleFetching.filter(id => id !== action.userId)\r\n\t\t\t}\r\n\t\tcase 'SEARCH_USERS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, userData: [...action.arrivedUsers]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'GET_USERS_FRIENDS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, userData: [...action.users]\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'SET_FILTER_TERM': {\r\n\t\t\treturn { ...state, filter: action.payload }\r\n\t\t}\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const action = {\r\n\tsearchUsers: (arrivedUsers: Array<UserDataType>) => ({ type: 'SEARCH_USERS', arrivedUsers } as const),\r\n\tfollow: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n\tunFollow: (userId: number) => ({ type: 'UNFOLLOW', userId } as const),\r\n\tsetUsers: (users: Array<UserDataType>) => ({ type: 'SET_USERS', users } as const),\r\n\tsetCurrent: (p: number) => ({ type: 'CURRENT', p } as const),\r\n\tsetTotalUsers: (count: number) => ({ type: 'TOTAL_COUNT', count } as const),\r\n\tswitchFetch: (fetching: boolean) => ({ type: 'SWITCH_FETCH', fetching } as const),\r\n\ttoggleFetchingInProgres: (fetching: boolean, userId: number) => ({ type: 'TOGGLE_FETCHING', fetching, userId } as const),\r\n\tgetUserFriends: (users: Array<UserDataType>) => ({ type: 'GET_USERS_FRIENDS', users } as const),\r\n\tsetFilterTerm: (filter: FilterType) => ({ type: 'SET_FILTER_TERM', payload: filter } as const)\r\n}\r\n\r\ntype DispatchType = Dispatch<ActionType> // use in dispatch\r\ntype StateType = () => AppStateType // use in props for state\r\ntype ThunkType = CommonThunkActionType<ActionType> // use after props thunk\r\n\r\nexport const getUsers = (currentPage: number, pageCount: number, filter: FilterType): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tdispatch(action.switchFetch(true));\r\n\t\tdispatch(action.setFilterTerm(filter))\r\n\t\tlet data = await usersAPI.getUsers(currentPage, pageCount, filter.term, filter.friend)\r\n\t\tdispatch(action.switchFetch(false));\r\n\t\tdispatch(action.setUsers(data.items));\r\n\t\tdispatch(action.setTotalUsers(data.totalCount));\r\n\t\tdispatch(action.setCurrent(currentPage));\r\n\t}\r\n//  getState: () => AppStateType\r\nexport const changePage = (numb: number, pageCount: number, term: string): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tdispatch(action.setCurrent(numb));\r\n\t\tdispatch(action.switchFetch(true));\r\n\t\tlet data = await usersAPI.getUsers(numb, pageCount, term)\r\n\t\tdispatch(action.switchFetch(false));\r\n\t\tdispatch(action.setUsers(data.items));\r\n\t}\r\n\r\nexport const unFollowTh = (userId: number) => async (dispatch: DispatchType) => {\r\n\tdispatch(action.toggleFetchingInProgres(true, userId));\r\n\tlet data = await usersAPI.unfollow(userId)\r\n\tif (data.resultCode == 0) dispatch(action.unFollow(userId));\r\n\tdispatch(action.toggleFetchingInProgres(false, userId));\r\n}\r\n\r\nexport const followTh = (userId: number): ThunkType => async (dispatch) => {\r\n\tdispatch(action.toggleFetchingInProgres(true, userId));\r\n\tlet data = await usersAPI.follow(userId)\r\n\tif (data.resultCode === 0) dispatch(action.follow(userId));\r\n\tdispatch(action.toggleFetchingInProgres(false, userId));\r\n}\r\nexport const searchUsersTh = (nameUsers: string): ThunkType =>\r\n\tasync (dispatch) => {\r\n\t\tlet data = await usersAPI.searchUsersByName(nameUsers)\r\n\t\tdispatch(action.searchUsers(data.items))\r\n\t}\r\n\r\nexport const getUserFriends = (): ThunkType => async (dispatch) => {\r\n\tlet data = await usersAPI.getUsersFriends()\r\n\tdispatch(action.getUserFriends(data.items))\r\n}\r\nexport default userReducer;","D:\\SAMURAI\\myapp\\src\\redux\\profilePageReduser.ts",["205","206"],"\r\nimport { Dispatch } from \"react\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { PhotosType, PostDataType, ProfileType } from \"../commonType/commonType\";\r\nimport { InitialVFormik } from \"../component/Profile/ProfileInfo/ContactProfileFrorm\";\r\nimport { ResultCodeEnum } from \"../api/api\";\r\nimport { ActionsTypes, AppStateType, CommonThunkActionType } from \"./reduxStore\";\r\nimport { profileAPI } from \"../api/profileApi\";\r\n\r\n// const CHANGE_PROFILE = 'CHANGE_PROFILE';\r\n\r\nlet initialState = {\r\n\tpostsData: [\r\n\t\t{ id: 1, count: '5', name: 'Artur', value: 'hi' },\r\n\t\t{ id: 2, count: '1', name: 'Mukolai', value: 'hi' },\r\n\t\t{ id: 3, count: '2', name: 'Sanya', value: 'hi' }\r\n\t] as Array<PostDataType>,\r\n\tpost: '',\r\n\tprofile: null as ProfileType | null,\r\n\tstatus: '',\r\n};\r\nexport type InitializStateType = typeof initialState;\r\ntype ActionType = ActionsTypes<typeof action>\r\n\r\nconst profileReduser = (state = initialState, action: ActionType): InitializStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase 'ADD_POST': {\r\n\t\t\tlet newP = { id: state.postsData.length + 1, count: '0', name: 'artur', value: action.newPostTt };\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tpostsData: [...state.postsData, newP],\r\n\t\t\t};\r\n\t\t}\r\n\t\tcase 'SET_PROFILE': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, profile: action.profile\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcase 'SET_STATUS': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, status: action.status\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'DELETED_POST': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, postsData: state.postsData.filter(item => item.id !== action.id)\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'ADD_T': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, post: action.newPostTt\r\n\t\t\t}\r\n\t\t}\r\n\t\tcase 'PHOTO': {\r\n\t\t\treturn {\r\n\t\t\t\t...state, profile: { ...state.profile, photos: action.photos } as ProfileType\r\n\t\t\t}\r\n\t\t}\r\n\t\t// case CHANGE_PROFILE: {\r\n\t\t// \tdebugger\r\n\t\t// \treturn {\r\n\t\t// \t\t...state, profile: {\r\n\t\t// \t\t\t...state.profile,\r\n\t\t// \t\t\taboutMe: action.objProperti.aboutMe,\r\n\t\t// \t\t\tlookingForAJobDescription: action.objProperti.lookingForAJobDescription,\r\n\t\t// \t\t\tfullName: action.objProperti.fullName,\r\n\t\t// \t\t}\r\n\t\t// \t}\r\n\t\t// }\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nexport const action = {\r\n\tchangePhoto: (photos: PhotosType) => ({ type: 'PHOTO', photos } as const),\r\n\taddT: (newPostTt: string) => ({ type: 'ADD_T', newPostTt } as const),\r\n\taddCreactorPost: (newPostTt: string) => ({ type: 'ADD_POST', newPostTt } as const), //for test\r\n\tsetProfile: (profile: ProfileType) => ({ type: 'SET_PROFILE', profile } as const),\r\n\tsetStatus: (status: string) => ({ type: 'SET_STATUS', status } as const),\r\n\tdeletedPost: (id: number) => ({ type: 'DELETED_POST', id } as const), //for test\r\n\t// export const changeProfile = (objProperti) => ({ type: CHANGE_PROFILE, objProperti }); // if want use so!\r\n}\r\n\r\n\r\n\r\ntype DispatchType = Dispatch<ActionType>\r\ntype StateType = () => AppStateType\r\ntype ThunkType = CommonThunkActionType<ActionType>\r\n\r\nexport const getProfileTh = (userId: number | null) => async (dispatch: DispatchType) => {\r\n\tlet data = await profileAPI.getProfile(userId)\r\n\tdispatch(action.setProfile(data));\r\n}\r\nexport const getStatusTh = (userId: number) => async (dispatch: DispatchType) => {    //для кого полуить стату\r\n\tlet response = await profileAPI.getStatus(userId)\r\n\tdispatch(action.setStatus(response.data)); //для сетСтатус\r\n}\r\nexport const updateStatusTh = (status: string) => async (dispatch: DispatchType) => {\r\n\tlet response = await profileAPI.updateStatus(status)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.setStatus(status));\r\n\t}\r\n}\r\n\r\nexport const sendPhoto = (photo: File): ThunkType => async (dispatch) => {\r\n\tlet data = await profileAPI.sendPhoto(photo)\r\n\tif (data.resultCode === ResultCodeEnum.Succses) {\r\n\t\tdispatch(action.changePhoto(data.data.photos));\r\n\t}\r\n}\r\n\r\nexport const editProfile = (objProperti: InitialVFormik): ThunkType => async (dispatch, getState) => { // refresh profile data and do request new user profile\r\n\tlet userId = getState().auth.userId;\r\n\tlet response = await profileAPI.editProfile(objProperti)\r\n\tif (response.resultCode === ResultCodeEnum.Succses) {\r\n\t\tif (userId !== null) {\r\n\t\t\tdispatch(getProfileTh(userId))\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthrow new Error(\"User id can`t be null\")\r\n\t\t}\r\n\r\n\t\t// dispatch(changeProfile(objProperti));\r\n\t}\r\n}\r\n\r\nexport default profileReduser;","D:\\SAMURAI\\myapp\\src\\redux\\dialogdsPageReduser.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\Users.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\common\\PageGenerator\\PageGenerator.tsx",["207"],"import s from './PageGenerator.module.css';\r\n\r\n\r\ntype PropsType = {\r\n\tpageTotal: number\r\n\tpageCount: number\r\n\tcurrentPage: number\r\n\tonChangeNumb: (item: number) => void\r\n}\r\nconst PageGenerator: React.FC<PropsType> = ({ pageTotal, pageCount, currentPage, onChangeNumb }): any => {\r\n\r\n\r\n\r\n\tlet pageArray: Array<number> = [];\r\n\tfor (let i = 1; i <= Math.ceil(pageTotal / pageCount); i++) {\r\n\t\tpageArray.push(i);\r\n\t}\r\n\r\n\treturn (\r\n\t\tpageArray.map(item => {\r\n\t\t\tif ((item >= (currentPage - 2)) && (item <= (currentPage + 2))) {\r\n\t\t\t\treturn (<span key={item} onClick={e => { onChangeNumb(item) }}\r\n\t\t\t\t\tclassName={currentPage === item ? s.thisPage : \"\"}>\r\n\t\t\t\t\t{` ${item}`}</span>);\r\n\t\t\t} else if (pageArray.length === item) {\r\n\t\t\t\treturn (<span key={item} onClick={e => { onChangeNumb(item) }}\r\n\t\t\t\t\tclassName={currentPage === item ? s.thisPage : \"\"}>\r\n\t\t\t\t\t{` ...${item}`}</span>);\r\n\t\t\t}\r\n\t\t})\r\n\t);\r\n}\r\nexport default PageGenerator;\r\n",["208","209"],"D:\\SAMURAI\\myapp\\src\\component\\Users\\User\\User\\User.tsx",[],["210","211"],"D:\\SAMURAI\\myapp\\src\\redux\\reduxStore.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Settings\\Settings.tsx",[],"D:\\SAMURAI\\myapp\\src\\redux\\userSelect.ts",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\MyPosts.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\MyPosts\\Posts\\Post.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfile.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ContactProfileFrorm.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileInfo.tsx",["212"],"import Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHook from './ProfileStatusWithHook';\r\nimport iconUser from './../../../img/images.png';\r\nimport ContactProfile from './ContactProfile';\r\nimport React, { ChangeEvent, memo, useState } from 'react';\r\nimport ContactProfileFrorm, { InitialVFormik } from \"./ContactProfileFrorm\";\r\nimport { ProfileType } from '../../../commonType/commonType';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../../redux/reduxStore';\r\nimport { editProfile, sendPhoto, updateStatusTh } from '../../../redux/profilePageReduser';\r\n\r\n\r\ntype PropsType = { isOwner: boolean }\r\nexport const ProfileInfo: React.FC<PropsType> = memo((props) => {\r\n\r\n\tconst profile = useSelector((state: AppStateType) => state.profilePage.profile)\r\n\tconst status = useSelector((state: AppStateType) => state.profilePage.status)\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst editProf = (objProperti: InitialVFormik) => { dispatch(editProfile(objProperti)) }\r\n\tconst sendPhotoT = (file: File) => { dispatch(sendPhoto(file)) }\r\n\tconst updateStatusThT = (status: string) => { dispatch(updateStatusTh(status)) }\r\n\r\n\r\n\tlet [editMode, setEditMode] = useState(false);\r\n\r\n\tif (!profile) {\r\n\t\treturn <Preloader />\r\n\t}\r\n\tconst selectFile = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tif (e.target.files?.length) {\r\n\t\t\tsendPhotoT(e.target.files[0])\r\n\t\t}\r\n\t}\r\n\r\n\tconst editProfileData = (obj: InitialVFormik) => {\r\n\t\teditProf(obj);\r\n\t\tsetEditMode(false);\r\n\t}\r\n\r\n\tconst activeEditMode = () => {\r\n\t\tsetEditMode(true);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={s.wrapper}>\r\n\t\t\t<div>\r\n\t\t\t\t<div className={s.pagePhoto}>\r\n\t\t\t\t\t<img alt='' src={profile.photos.small || iconUser} className={s.userIcon} />\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{props.isOwner && <input type={'file'} onChange={selectFile} />}\r\n\t\t\t</div>\r\n\r\n\t\t\t{editMode ? <ContactProfileFrorm isOwner={props.isOwner} pf={profile} editProfileData={editProfileData} />\r\n\t\t\t\t: <ContactProfile isOwner={props.isOwner} pf={profile} activeEditMode={activeEditMode} />}\r\n\r\n\t\t\t<ProfileStatusWithHook status={status} updateStatusTh={updateStatusThT} />\r\n\t\t</div >\r\n\t);\r\n})\r\n","D:\\SAMURAI\\myapp\\src\\component\\Navbar\\Navbar.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\News\\News.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\login\\Login.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Friends\\FriendsContainer.tsx",["213"],"import { useDispatch, useSelector } from 'react-redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport Friend from './Friend/Friend';\r\nimport s from './Friends.module.css'\r\nimport { getFriendsTh } from '../../redux/friendsPageReduser';\r\nimport { useEffect } from 'react';\r\n\r\n\r\nexport const Friends: React.FC = () => {\r\n\r\n\tconst friendsData = useSelector((state: AppStateType) => state.friends.friendsData)\r\n\tconst dispatch = useDispatch()\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tdispatch(getFriendsTh())\r\n\t}, [])\r\n\r\n\tlet friend = friendsData.map((friend) => <Friend key={friend.id} item={friend} />)\r\n\r\n\treturn (\r\n\t\t<div className={s.friends}>\r\n\t\t\t{friend}\r\n\t\t</div >\r\n\t);\r\n}\r\n\r\n","D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Dialogs.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\DialogItem\\DialogsItem.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Friends\\Friend\\Friend.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Diaologs\\Messages\\Messages.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\hoc\\withAurhRedirect.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfileInfo\\ProfileStatusWithHook.tsx",[],"D:\\SAMURAI\\myapp\\src\\api\\profileApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\usersApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\api.ts",["214"],"import axios from \"axios\";\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n\tSuccses = 0,\r\n\tError = 1\r\n}\r\nexport enum ResultCodeCaptchEnum {\r\n\tCaptcha = 10\r\n}\r\nexport const instance = axios.create({\r\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n\twithCredentials: true,\r\n\theaders: {\r\n\t\t\"API-KEY\": \"1f1850ac-6994-4f00-8632-17c6cdab6dee\"\r\n\t}\r\n});\r\n\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n\tdata: D\r\n\tfieldsErrors: Array<string>\r\n\tmessages: Array<string>\r\n\tresultCode: 0\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","D:\\SAMURAI\\myapp\\src\\api\\authApi.ts",[],"D:\\SAMURAI\\myapp\\src\\api\\securityApi.ts",[],"D:\\SAMURAI\\myapp\\src\\App.tsx",["215","216"],"import 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport Navbar from './component/Navbar/Navbar';\r\nimport { BrowserRouter, HashRouter, Redirect, Route, Switch, withRouter }\r\n\tfrom 'react-router-dom';\r\nimport Music from './component/Music/Music';\r\nimport Settings from './component/Settings/Settings';\r\nimport News from './component/News/News';\r\nimport { Friends } from './component/Friends/FriendsContainer';\r\nimport { UsersPage } from './component/Users/UsersPage';\r\nimport { LoginPage } from './component/login/Login';\r\nimport React, { Suspense, useEffect } from 'react';\r\nimport { Provider, useDispatch, useSelector } from 'react-redux';\r\nimport { initializeApp } from './redux/appReduser';\r\nimport { compose } from 'redux';\r\nimport Preloader from './component/common/Preloader/Preloader';\r\nimport store, { AppStateType } from \"./redux/reduxStore\";\r\nimport { Button, Layout } from 'antd';\r\nimport { HeaderCompont } from './component/Header/HeaderCompont';\r\nimport { singOutTh } from './redux/authReduser';\r\n\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst Dialogs = React.lazy(() => import('./component/Diaologs/Dialogs'));\r\nconst ProfileContainer = React.lazy(() => import('./component/Profile/ProfContainer'));\r\nconst ChatPages = React.lazy(() => import('./component/pages/ChatPages'));\r\n\r\nconst App: React.FC = () => {\r\n\tconst tailLayout = {\r\n\t\twrapperCol: { offset: 13, span: 6 },\r\n\t};\r\n\tconst init = useSelector((state: AppStateType) => state.app.initialized)\r\n\tconst dispatch = useDispatch()\r\n\tconst isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\tconst singOut = (() => dispatch(singOutTh()))\r\n\r\n\tconst catchAllerrors = (e: PromiseRejectionEvent) => {\r\n\t\talert(\"errors\"); // вызываем не алерт а санку(нужно сделать ) и там дисппат сделать изменить стейт вывести текст где то как с капей и как то убирать \r\n\t}\r\n\tuseEffect(() => {\r\n\r\n\t\tdispatch(initializeApp())\r\n\t\twindow.addEventListener(\"unhandledrejection\", catchAllerrors)\r\n\t}, [])\r\n\r\n\tif (!init) return <Preloader />\r\n\r\n\treturn (\r\n\t\t<Layout>\r\n\t\t\t<Sider\r\n\t\t\t\tbreakpoint=\"lg\"\r\n\t\t\t\tcollapsedWidth=\"0\"\r\n\t\t\t\tonBreakpoint={broken => {\r\n\r\n\t\t\t\t}}\r\n\t\t\t\tonCollapse={(collapsed, type) => {\r\n\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div className=\"logo\" />\r\n\t\t\t\t<Navbar />\r\n\t\t\t\t{isAuth && <Button {...tailLayout} type='primary' onClick={singOut}>Logout</Button>}\r\n\r\n\t\t\t</Sider>\r\n\t\t\t<Layout>\r\n\t\t\t\t<Header className=\"site-layout-sub-header-background\"\r\n\t\t\t\t\tstyle={{ padding: 0, minHeight: 80 }} >\r\n\t\t\t\t\t<HeaderCompont />\r\n\t\t\t\t</Header>\r\n\t\t\t\t<Content style={{ margin: '24px 16px 0' }}>\r\n\t\t\t\t\t<div className=\"site-layout-background\" style={{ padding: 15, minHeight: 360 }}>\r\n\t\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t\t<Route exact path='/' render={() => {\r\n\t\t\t\t\t\t\t\treturn <Redirect to={'/profile'} />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t\t< Route path='/profile/:userId?' render={() => {\r\n\t\t\t\t\t\t\t\treturn <Suspense fallback={\r\n\t\t\t\t\t\t\t\t\t<div>loading...</div>}>\r\n\t\t\t\t\t\t\t\t\t<ProfileContainer />\r\n\t\t\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t\t< Route path='/friends' render={() => <Friends />} />\r\n\t\t\t\t\t\t\t<Route path='/dialogs' render={() => {\r\n\t\t\t\t\t\t\t\treturn <Suspense fallback={<div>loading...</div>}>\r\n\t\t\t\t\t\t\t\t\t<Dialogs />\r\n\t\t\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t\t< Route path='/chat' render={() => {\r\n\t\t\t\t\t\t\t\treturn <Suspense fallback={\r\n\t\t\t\t\t\t\t\t\t<div>loading...</div>}>\r\n\t\t\t\t\t\t\t\t\t<ChatPages />\r\n\t\t\t\t\t\t\t\t</Suspense>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} />\r\n\t\t\t\t\t\t\t<Route path='/music' render={() => <Music />} />\r\n\t\t\t\t\t\t\t<Route path='/news' render={() => <News />} />\r\n\t\t\t\t\t\t\t<Route path='/find/users' render={() => <UsersPage title={'users'} />} />\r\n\t\t\t\t\t\t\t<Route path='/settings' render={() => <Settings />} />\r\n\t\t\t\t\t\t\t<Route path='/login' render={() => <LoginPage />} />\r\n\t\t\t\t\t\t</Switch>\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Content>\r\n\t\t\t\t<Footer style={{ textAlign: 'center' }}>Design  by Artur Piloyan</Footer>\r\n\t\t\t</Layout>\r\n\t\t</Layout >\r\n\t)\r\n\r\n}\r\n\r\n\r\nlet AppContainer = compose<React.ComponentType>(withRouter)(App);\r\n\r\nconst MainApp: React.FC = () => {\r\n\treturn (\r\n\t\t<BrowserRouter>\r\n\t\t\t<Provider store={store} >\r\n\t\t\t\t<AppContainer />\r\n\t\t\t</Provider>\r\n\t\t</BrowserRouter>\r\n\t)\r\n}\r\nexport default MainApp;\r\n\r\n\r\n\r\n\r\n\r\n","D:\\SAMURAI\\myapp\\src\\component\\common\\Preloader\\Preloader.tsx",[],"D:\\SAMURAI\\myapp\\src\\index.tsx",[],"D:\\SAMURAI\\myapp\\src\\component\\Search\\Search.tsx",["217"],"import { Button } from \"antd\"\r\nimport { Formik, Form, Field } from \"formik\"\r\nimport { useSelector } from \"react-redux\"\r\nimport { getFilter } from \"../../redux/userSelect\"\r\nimport { FilterType } from \"../Users/UsersPage\"\r\nimport { SearchOutlined } from '@ant-design/icons';\r\n\r\n\r\n\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype initValuesType = {\r\n\tterm: string,\r\n\tfriend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n\tsearchUsers: (filter: FilterType) => void\r\n}\r\nconst layout = {\r\n\tlabelCol: { span: 2 },\r\n\twrapperCol: { span: 3 },\r\n}\r\n\r\nconst Search: React.FC<PropsType> = (props) => {\r\n\tconst filter = useSelector(getFilter)\r\n\r\n\tconst initValues: initValuesType = {\r\n\t\tterm: filter.term,\r\n\t\tfriend: String(filter.friend) as FriendFormType\r\n\t}\r\n\r\n\r\n\r\n\tconst onsubmit = (values: initValuesType) => {\r\n\t\tconst filter: FilterType = {\r\n\t\t\tterm: values.term,\r\n\t\t\tfriend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n\t\t}\r\n\t\tprops.searchUsers(filter)\r\n\t}\r\n\treturn <div>\r\n\t\t<Formik\r\n\t\t\tenableReinitialize={true}\r\n\t\t\tinitialValues={initValues}\r\n\t\t\tonSubmit={(values: initValuesType) => {\r\n\t\t\t\tonsubmit(values)\r\n\t\t\t}}\r\n\t\t>{props => {\r\n\t\t\treturn <Form>\r\n\r\n\t\t\t\t{/* <Input style={{ width: '30%' }} name={'term'} />\r\n\t\t\t\t<Select showSearch style={{ width: '15%' }}\r\n\t\t\t\t\tplaceholder=\"Search to Select\">\r\n\t\t\t\t\t<Option value=\"null\">All Users</Option>\r\n\t\t\t\t\t<Option value=\"true\">Friends</Option>\r\n\t\t\t\t\t<Option value=\"false\">Not signed yet </Option>\r\n\t\t\t\t</Select >\r\n\r\n\t\t\t\t<Input.Group compact>\r\n\t\t\t\t\t<Input style={{ width: '30%' }} name={'term'} />\r\n\t\t\t\t\t<Select showSearch defaultValue=\"\" style={{ width: '15%' }}\r\n\t\t\t\t\t\tplaceholder=\"Search to Select\">\r\n\t\t\t\t\t\t<Option value=\"null\">All Users</Option>\r\n\t\t\t\t\t\t<Option value=\"true\">Friends</Option>\r\n\t\t\t\t\t\t<Option value=\"false\">Not signed yet </Option>\r\n\t\t\t\t\t</Select>\r\n\t\t\t\t</Input.Group> */}\r\n\r\n\t\t\t\t<Field name=\"term\" />\r\n\t\t\t\t<Field name=\"friend\" as=\"select\">\r\n\t\t\t\t\t<option value=\"null\">All</option>\r\n\t\t\t\t\t<option value=\"true\">Friends</option>\r\n\t\t\t\t\t<option value=\"false\">Unfollow</option>\r\n\t\t\t\t</Field>\r\n\t\t\t\t<Button type='link' icon={<SearchOutlined />} htmlType={'submit'}> Search</Button >\r\n\t\t\t</Form>\r\n\t\t}}\r\n\t\t</Formik>\r\n\t</div>\r\n}\r\n\r\nexport default Search\r\n\r\n\r\n\r\n","D:\\SAMURAI\\myapp\\src\\component\\Users\\UsersPage.tsx",["218","219"],"import { useDispatch, useSelector } from \"react-redux\";\r\nimport { changePage, getUsers } from \"../../redux/usersPageReducer\";\r\nimport React, { useEffect } from 'react';\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { getPageTotal, getPageCount, getCurrentPage, getIsFetching, getFilter }\r\n\tfrom \"../../redux/userSelect\";\r\nimport Search from \"../Search/Search\";\r\nimport { Users } from \"./User/Users\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Qs from \"qs\";\r\nimport { Pagination } from 'antd'\r\n\r\nexport type FilterType = {\r\n\tterm: string,\r\n\tfriend: boolean | null\r\n}\r\ntype PropsType = {\r\n\ttitle: string\r\n}\r\ntype QueryParamsType = { term?: string, friend?: string, page?: string }\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n\tconst isFetching = useSelector(getIsFetching)\r\n\tconst currentPage = useSelector(getCurrentPage)\r\n\tconst pageTotal = useSelector(getPageTotal)\r\n\tconst pageCount = useSelector(getPageCount)\r\n\tconst filter = useSelector(getFilter)\r\n\tconst dispatch = useDispatch()\r\n\tconst history = useHistory()\r\n\r\n\tuseEffect(() => {\r\n\t\tconst parsed = Qs.parse(history.location.search.substr(1)) as QueryParamsType\r\n\t\tlet actualPage = currentPage\r\n\t\tlet actualFilter = filter\r\n\t\tswitch (parsed.friend) {\r\n\t\t\tcase \"null\":\r\n\t\t\t\tactualFilter = { ...actualFilter, friend: null }\r\n\t\t\t\tbreak\r\n\t\t\tcase \"true\":\r\n\t\t\t\tactualFilter = { ...actualFilter, friend: true }\r\n\t\t\t\tbreak\r\n\t\t\tcase \"false\":\r\n\t\t\t\tactualFilter = { ...actualFilter, friend: false }\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t\tif (!!parsed.page) actualPage = Number(parsed.page)\r\n\t\tif (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string }\r\n\r\n\t\tdispatch(getUsers(actualPage, pageCount, actualFilter))\r\n\t}, [])\r\n\r\n\tconst onSearchUsers = (filter: FilterType) => {\r\n\r\n\t\tdispatch(getUsers(1, pageCount, filter))\r\n\t}\r\n\tconst onChangeNumb = (currentPage: number) => {\r\n\t\tdispatch(changePage(currentPage, pageCount, filter.term));\r\n\t}\r\n\tuseEffect(() => {\r\n\t\tconst query: QueryParamsType = {}\r\n\r\n\t\tif (!!filter.term) query.term = filter.term\r\n\t\tif (filter.friend !== null) query.friend = String(filter.friend)\r\n\t\tif (currentPage !== 1) query.page = String(currentPage)\r\n\t\thistory.push({\r\n\t\t\tpathname: '/find/users',\r\n\t\t\tsearch: Qs.stringify(query)\r\n\t\t})\r\n\t}, [filter, currentPage])\r\n\r\n\treturn <>\r\n\t\t{isFetching ? <Preloader /> : null}\r\n\t\t{props.title}\r\n\t\t<Search searchUsers={onSearchUsers} />\r\n\t\t<Pagination defaultCurrent={1} total={pageTotal} defaultPageSize={pageCount} current={currentPage} onChange={onChangeNumb} />\r\n\t\t<Users />\r\n\t</>\r\n}\r\n","D:\\SAMURAI\\myapp\\src\\component\\Header\\HeaderCompont.tsx",["220","221","222","223","224"],"import { Button } from 'antd';\r\nimport Avatar from 'antd/lib/avatar/avatar';\r\nimport { match } from 'assert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { singOutTh } from '../../redux/authReduser';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport s from './Header.module.css';\r\nimport useReactRouter from 'use-react-router';\r\n\r\ntype PropsType = {}\r\nexport const HeaderCompont: React.FC<PropsType> = (props) => {\r\n\tconst isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\tconst login = useSelector((state: AppStateType) => state.auth.login)\r\n\tconst photoSrc = useSelector((state: AppStateType) => state.profilePage.profile?.photos.small)\r\n\r\n\tconst { match } = useReactRouter();\r\n\tlet i = match;\r\n\treturn (\r\n\t\t<div style={{ color: 'yellow' }}>\r\n\t\t\t{isAuth\r\n\t\t\t\t? <div >\r\n\t\t\t\t\t<Avatar src={(photoSrc) as string} />\r\n\t\t\t\t\t{login}\r\n\t\t\t\t</div>\r\n\t\t\t\t: <Button type='primary'><NavLink to=\"/login\">login</NavLink></Button>}\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n","D:\\SAMURAI\\myapp\\src\\component\\Profile\\ProfContainer.tsx",["225","226"],"import React, { useEffect } from 'react';\r\nimport s from './Profile.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProfileTh, getStatusTh, } from '../../redux/profilePageReduser';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../hoc/withAurhRedirect';\r\nimport { compose } from 'redux';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport { MyPosts } from './MyPosts/MyPosts';\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo';\r\nimport useReactRouter from 'use-react-router';\r\n\r\n\r\ntype PropsType = RouteComponentProps<RoutePropsType>\r\ntype RoutePropsType = {\r\n\tuserId: string\r\n}\r\n\r\nexport const ProfConteiner: React.FC<PropsType> = (props) => {\r\n\tconst idUser = useSelector((state: AppStateType) => state.auth.userId)\r\n\tconst { history } = useReactRouter();\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst getProfile = (userId: number) => { dispatch(getProfileTh(userId)) }\r\n\tconst getStatus = (userId: number) => { dispatch(getStatusTh(userId)) }\r\n\r\n\tconst refreshProfile = () => {\r\n\t\tlet userId: number | null = +props.match.params?.userId;\r\n\t\tif (!userId) {\r\n\t\t\tuserId = idUser\r\n\t\t\tif (!idUser) {\r\n\t\t\t\thistory.push('/login')\r\n\t\t\t}\r\n\t\t}\r\n\t\tgetProfile(userId as number);\r\n\t\tgetStatus(userId as number);\r\n\t}\r\n\tuseEffect(() => { //ВОСПРИНИМАТЬ КАК СИНХРОНИЗАЦИЮ\r\n\t\trefreshProfile()\r\n\t}, [])\r\n\r\n\tuseEffect(() => { refreshProfile() }, [props.match.params.userId])\r\n\treturn (\r\n\t\t<div className={s.content} >\r\n\t\t\t<ProfileInfo isOwner={!props.match.params.userId} />\r\n\t\t\t<MyPosts />\r\n\t\t</div >\r\n\t)\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n\twithRouter,\r\n\twithAuthRedirect,\r\n)(ProfConteiner);","D:\\SAMURAI\\myapp\\src\\component\\pages\\ChatPages.tsx",["227","228"],"import { message } from \"antd\"\r\nimport { Field, Formik, Form } from \"formik\"\r\nimport { useEffect, useState } from \"react\"\r\nimport image from '../../img/img.webp'\r\n\r\n\r\nconst wsChanel = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n\r\nconst ChatPages: React.FC = () => {\r\n\treturn (\r\n\t\t<Chat />\r\n\t)\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\treturn <div>\r\n\t\t<ChatMessages />\r\n\t\t<AddMessageForm />\r\n\t</div>\r\n}\r\n\r\ntype ChatMessagesType = {\r\n\tmessage: string\r\n\tphoto: string\r\n\tuserId: number\r\n\tuserName: string\r\n}\r\n\r\nconst ChatMessages: React.FC = () => {\r\n\r\n\tconst [messages, setMessage] = useState<ChatMessagesType[]>([]) //our LS  \r\n\r\n\tuseEffect(() => {\r\n\t\twsChanel.addEventListener('open', () => {\r\n\r\n\t\t})\r\n\t}, [])\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\twsChanel.addEventListener('message', (e: MessageEvent) => { //get message into our LS \r\n\t\t\tconst newMessage = JSON.parse(e.data)\r\n\t\t\tsetMessage((prevMessage) => [...prevMessage, ...newMessage]) //переписали ф-ю сетМесадж, в него прийдет прошлый месседж логика переобразования LS\r\n\t\t})\r\n\t}, [])\r\n\treturn (\r\n\t\t<div style={{ height: '400px', overflowY: 'auto' }} >\r\n\t\t\t{ messages.map((m: any, index) => <Message key={index} message={m} />)}\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\ntype MessageType = {\r\n\tmessage: ChatMessagesType\r\n}\r\nconst Message: React.FC<MessageType> = ({ message }) => {\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<img width={50} src={message.photo} alt=\"\" />\r\n\t\t\t{message.userName}\r\n\t\t\t<div>\r\n\t\t\t\t{message.message}\r\n\t\t\t</div>\r\n\t\t\t<hr />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst AddMessageForm: React.FC = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Formik\r\n\t\t\t\tinitialValues={{ body: \"\" }}\r\n\t\t\t\tonSubmit={(values, { resetForm }) => {\r\n\t\t\t\t\twsChanel.send(values.body)\r\n\t\t\t\t\tresetForm()\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t>{() => {\r\n\t\t\t\treturn <Form>\r\n\t\t\t\t\t<Field name=\"body\" type={'input'} />\r\n\t\t\t\t\t<button type={'submit'}>Send</button>\r\n\t\t\t\t</Form>\r\n\r\n\t\t\t}}\r\n\t\t\t</Formik>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\n\r\nexport default ChatPages;",{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":1,"column":10,"nodeType":"235","messageId":"236","endLine":1,"endColumn":18},{"ruleId":"233","severity":1,"message":"237","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":21},{"ruleId":"233","severity":1,"message":"238","line":4,"column":24,"nodeType":"235","messageId":"236","endLine":4,"endColumn":36},{"ruleId":"233","severity":1,"message":"239","line":6,"column":7,"nodeType":"235","messageId":"236","endLine":6,"endColumn":18},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"237","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":21},{"ruleId":"233","severity":1,"message":"238","line":6,"column":24,"nodeType":"235","messageId":"236","endLine":6,"endColumn":36},{"ruleId":"233","severity":1,"message":"237","line":2,"column":10,"nodeType":"235","messageId":"236","endLine":2,"endColumn":21},{"ruleId":"233","severity":1,"message":"240","line":102,"column":6,"nodeType":"235","messageId":"236","endLine":102,"endColumn":15},{"ruleId":"241","severity":1,"message":"242","line":128,"column":22,"nodeType":"243","messageId":"244","endLine":128,"endColumn":24},{"ruleId":"233","severity":1,"message":"237","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":21},{"ruleId":"233","severity":1,"message":"240","line":90,"column":6,"nodeType":"235","messageId":"236","endLine":90,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":20,"column":22,"nodeType":"247","messageId":"248","endLine":20,"endColumn":24},{"ruleId":"229","replacedBy":"249"},{"ruleId":"231","replacedBy":"250"},{"ruleId":"229","replacedBy":"251"},{"ruleId":"231","replacedBy":"252"},{"ruleId":"233","severity":1,"message":"253","line":8,"column":10,"nodeType":"235","messageId":"236","endLine":8,"endColumn":21},{"ruleId":"254","severity":1,"message":"255","line":17,"column":5,"nodeType":"256","endLine":17,"endColumn":7,"suggestions":"257"},{"ruleId":"233","severity":1,"message":"258","line":20,"column":37,"nodeType":"235","messageId":"236","endLine":20,"endColumn":39},{"ruleId":"233","severity":1,"message":"259","line":4,"column":25,"nodeType":"235","messageId":"236","endLine":4,"endColumn":35},{"ruleId":"254","severity":1,"message":"255","line":44,"column":5,"nodeType":"256","endLine":44,"endColumn":7,"suggestions":"260"},{"ruleId":"233","severity":1,"message":"261","line":20,"column":7,"nodeType":"235","messageId":"236","endLine":20,"endColumn":13},{"ruleId":"254","severity":1,"message":"262","line":50,"column":5,"nodeType":"256","endLine":50,"endColumn":7,"suggestions":"263"},{"ruleId":"254","severity":1,"message":"264","line":69,"column":5,"nodeType":"256","endLine":69,"endColumn":26,"suggestions":"265"},{"ruleId":"233","severity":1,"message":"266","line":3,"column":10,"nodeType":"235","messageId":"236","endLine":3,"endColumn":15},{"ruleId":"233","severity":1,"message":"267","line":4,"column":10,"nodeType":"235","messageId":"236","endLine":4,"endColumn":21},{"ruleId":"233","severity":1,"message":"268","line":6,"column":10,"nodeType":"235","messageId":"236","endLine":6,"endColumn":19},{"ruleId":"233","severity":1,"message":"269","line":8,"column":8,"nodeType":"235","messageId":"236","endLine":8,"endColumn":9},{"ruleId":"233","severity":1,"message":"270","line":18,"column":6,"nodeType":"235","messageId":"236","endLine":18,"endColumn":7},{"ruleId":"254","severity":1,"message":"271","line":40,"column":5,"nodeType":"256","endLine":40,"endColumn":7,"suggestions":"272"},{"ruleId":"254","severity":1,"message":"271","line":42,"column":40,"nodeType":"256","endLine":42,"endColumn":67,"suggestions":"273"},{"ruleId":"233","severity":1,"message":"274","line":1,"column":10,"nodeType":"235","messageId":"236","endLine":1,"endColumn":17},{"ruleId":"233","severity":1,"message":"275","line":4,"column":8,"nodeType":"235","messageId":"236","endLine":4,"endColumn":13},"no-native-reassign",["276"],"no-negated-in-lhs",["277"],"@typescript-eslint/no-unused-vars","'Dispatch' is defined but never used.","Identifier","unusedVar","'ThunkAction' is defined but never used.","'AppStateType' is defined but never used.","'INITIALIZED' is assigned a value but never used.","'StateType' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["276"],["277"],["276"],["277"],"'ProfileType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["278"],"'RC' is defined but never used.","'HashRouter' is defined but never used.",["279"],"'layout' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'dispatch', 'filter', 'history.location.search', and 'pageCount'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["281"],"'match' is defined but never used.","'useDispatch' is defined but never used.","'singOutTh' is defined but never used.","'s' is defined but never used.","'i' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refreshProfile'. Either include it or remove the dependency array.",["282"],["283"],"'message' is defined but never used.","'image' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"284","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [dispatch]",{"range":"295","text":"296"},{"range":"297","text":"296"},"Update the dependencies array to be: [currentPage, dispatch, filter, history.location.search, pageCount]",{"range":"298","text":"299"},"Update the dependencies array to be: [filter, currentPage, history]",{"range":"300","text":"301"},"Update the dependencies array to be: [refreshProfile]",{"range":"302","text":"303"},"Update the dependencies array to be: [props.match.params.userId, refreshProfile]",{"range":"304","text":"305"},[513,515],"[dispatch]",[1973,1975],[1718,1720],"[currentPage, dispatch, filter, history.location.search, pageCount]",[2263,2284],"[filter, currentPage, history]",[1393,1395],"[refreshProfile]",[1439,1466],"[props.match.params.userId, refreshProfile]"]